ENST_protein_coding_fewer_UTRs$exon_chrom_start <- apply(ENST_protein_coding_fewer_UTRs, 1, function(x){
if(!is.na(x['3_utr_start']) &
!is.na(x['exon_chrom_start']) &
x['3_utr_start'] == x['exon_chrom_start']){
return(as.numeric(x['3_utr_end'])+1)
} else {
return(x['exon_chrom_start'])
}
})
ENST_protein_coding_no_UTRs_bed <- ENST_protein_coding_fewer_UTRs[1:3]
ENST_protein_coding_no_UTRs_bed$chromosome_name <- factor(ENST_protein_coding_no_UTRs_bed$chromosome_name,
levels = c(1:22, 'X', 'Y'))
ENST_protein_coding_no_UTRs_bed$exon_chrom_start <- as.numeric(ENST_protein_coding_no_UTRs_bed$exon_chrom_start)
ENST_protein_coding_no_UTRs_bed$exon_chrom_end <- as.numeric(ENST_protein_coding_no_UTRs_bed$exon_chrom_end)
ENST_protein_coding_no_UTRs_bed_ordered <- ENST_protein_coding_no_UTRs_bed[with(
ENST_protein_coding_no_UTRs_bed, order(chromosome_name, exon_chrom_start)), ]
ENST_protein_coding_no_UTRs_bed_ordered$exon_chrom_start <- gsub(' ', '', ENST_protein_coding_no_UTRs_bed_ordered$exon_chrom_start)
ENST_protein_coding_no_UTRs_bed_ordered$exon_chrom_end <- gsub(' ', '', ENST_protein_coding_no_UTRs_bed_ordered$exon_chrom_end)
write.table(ENST_protein_coding_no_UTRs_bed_ordered, file = "ENST_protein_coding_no_UTRs_bed_ordered.bed",
quote=F, sep="\t", row.names=F, col.names=F)
setwd('/Users/ebarnell/civic-panel/')
#Import Libraries
library(biomaRt)
library(data.table)
library(bedr)
#Read in manually curated tiling
tiling <- read.table('/Users/ebarnell/civic-panel/capture_sequence_tile.txt', head=T, sep='\t')
#Read in captureseq output file from ProbeSelection.py
capture_sequencing <- read.delim('/Users/ebarnell/civic-panel/capture_sequence_probes.tsv', head=T, sep='\t')
capture_sequencing <- subset(capture_sequencing, select=c(gene:stop))
capture_sequencing <- merge(capture_sequencing, tiling, by.x=c('gene', 'soid_name'), by.y = c('gene', 'Mutation'), all.x=TRUE)
exon_tiling <- subset(capture_sequencing, tile=='yes')
SNPs <- subset(capture_sequencing, tile=='no')
#remove the version number from transcripts
exon_tiling$transcript <- gsub('\\..*', '', exon_tilingg$transcript)
#Upload the ensembl mart
ensembl_us_west = useMart(biomart="ENSEMBL_MART_ENSEMBL", host="grch37.ensembl.org", dataset="hsapiens_gene_ensembl")
#Use the representative transcripts to get the ENSG IDs
ENSG <- getBM(attributes=c('ensembl_gene_id'), filters ='ensembl_transcript_id', values =c(exon_tiling$transcript), mart = ensembl_us_west)
#Use the ENSG IDs to get all ENST IDs assocaited with ENSG
ENST_all <- getBM(attributes=c('ensembl_transcript_id','chromosome_name','exon_chrom_start','exon_chrom_end', 'transcript_biotype'
), filters ='ensembl_gene_id', values =c(ENSG$ensembl_gene_id), mart = ensembl_us_west)
#Filter by protein coding ENSTs
ENST_protein_coding <- subset(ENST_all, ENST_all$transcript_biotype == 'protein_coding')
#Obtain the UTRs for all protein coding ENSTs
ENST_protein_coding_UTRs <- getBM(attributes=c('chromosome_name','exon_chrom_start','exon_chrom_end','5_utr_start', '5_utr_end', '3_utr_start',
'3_utr_end'), filters ='ensembl_transcript_id', values =c(ENST_protein_coding$ensembl_transcript_id),
mart = ensembl_us_west)
#Eliminate exons that is all UTR
ENST_protein_coding_fewer_UTRs <- ENST_protein_coding_UTRs[-which((ENST_protein_coding_UTRs$exon_chrom_start == ENST_protein_coding_UTRs$`5_utr_start` &
ENST_protein_coding_UTRs$exon_chrom_end == ENST_protein_coding_UTRs$`5_utr_end`) |
(ENST_protein_coding_UTRs$exon_chrom_start == ENST_protein_coding_UTRs$`3_utr_start` &
ENST_protein_coding_UTRs$exon_chrom_end == ENST_protein_coding_UTRs$`3_utr_end`) |
(ENST_protein_coding_UTRs$exon_chrom_end == ENST_protein_coding_UTRs$`5_utr_start` &
ENST_protein_coding_UTRs$exon_chrom_start == ENST_protein_coding_UTRs$`5_utr_end`) |
(ENST_protein_coding_UTRs$exon_chrom_end == ENST_protein_coding_UTRs$`3_utr_start` &
ENST_protein_coding_UTRs$exon_chrom_start == ENST_protein_coding_UTRs$`3_utr_end`)
),
]
#Eliminate 5' UTRs
ENST_protein_coding_fewer_UTRs$exon_chrom_end <- apply(ENST_protein_coding_fewer_UTRs, 1, function(x){
if(!is.na(x['5_utr_end']) &
!is.na(x['exon_chrom_end']) &
x['5_utr_end'] == x['exon_chrom_end']){
return(as.numeric(x['5_utr_start'])-1)
} else {
return(x['exon_chrom_end'])
}
})
#Eliminate 5' UTRs
ENST_protein_coding_fewer_UTRs$exon_chrom_start <- apply(ENST_protein_coding_fewer_UTRs, 1, function(x){
if(!is.na(x['5_utr_start']) &
!is.na(x['exon_chrom_start']) &
x['5_utr_start'] == x['exon_chrom_start']){
return(as.numeric(x['5_utr_end'])+1)
} else {
return(x['exon_chrom_start'])
}
})
#Eliminate 3' UTRs
ENST_protein_coding_fewer_UTRs$exon_chrom_end <- apply(ENST_protein_coding_fewer_UTRs, 1, function(x){
if(!is.na(x['3_utr_end']) &
!is.na(x['exon_chrom_end']) &
x['3_utr_end'] == x['exon_chrom_end']){
return(as.numeric(x['3_utr_start'])-1)
} else {
return(x['exon_chrom_end'])
}
})
#Eliminate 3' UTRs
ENST_protein_coding_fewer_UTRs$exon_chrom_start <- apply(ENST_protein_coding_fewer_UTRs, 1, function(x){
if(!is.na(x['3_utr_start']) &
!is.na(x['exon_chrom_start']) &
x['3_utr_start'] == x['exon_chrom_start']){
return(as.numeric(x['3_utr_end'])+1)
} else {
return(x['exon_chrom_start'])
}
})
#Create bed file from final exons
ENST_protein_coding_no_UTRs_bed <- ENST_protein_coding_fewer_UTRs[1:3]
ENST_protein_coding_no_UTRs_bed$chromosome_name <- factor(ENST_protein_coding_no_UTRs_bed$chromosome_name,
levels = c(1:22, 'X', 'Y'))
ENST_protein_coding_no_UTRs_bed$exon_chrom_start <- as.numeric(ENST_protein_coding_no_UTRs_bed$exon_chrom_start)
ENST_protein_coding_no_UTRs_bed$exon_chrom_end <- as.numeric(ENST_protein_coding_no_UTRs_bed$exon_chrom_end)
#Order the bed file based on chromosome then start
ENST_protein_coding_no_UTRs_bed_ordered <- ENST_protein_coding_no_UTRs_bed[with(
ENST_protein_coding_no_UTRs_bed, order(chromosome_name, exon_chrom_start)), ]
ENST_protein_coding_no_UTRs_bed_ordered$exon_chrom_start <- gsub(' ', '', ENST_protein_coding_no_UTRs_bed_ordered$exon_chrom_start)
ENST_protein_coding_no_UTRs_bed_ordered$exon_chrom_end <- gsub(' ', '', ENST_protein_coding_no_UTRs_bed_ordered$exon_chrom_end)
#Print out final file for merging
write.table(ENST_protein_coding_no_UTRs_bed_ordered, file = "ENST_protein_coding_no_UTRs_bed_ordered.bed",
quote=F, sep="\t", row.names=F, col.names=F)
setwd('/Users/ebarnell/civic-panel/')
#Import Libraries
library(biomaRt)
library(data.table)
library(bedr)
#Read in manually curated tiling
tiling <- read.table('/Users/ebarnell/civic-panel/capture_sequence_tile.txt', head=T, sep='\t')
#Read in captureseq output file from ProbeSelection.py
capture_sequencing <- read.delim('/Users/ebarnell/civic-panel/capture_sequence_probes.tsv', head=T, sep='\t')
capture_sequencing <- subset(capture_sequencing, select=c(gene:stop))
capture_sequencing <- merge(capture_sequencing, tiling, by.x=c('gene', 'soid_name'), by.y = c('gene', 'Mutation'), all.x=TRUE)
exon_tiling <- subset(capture_sequencing, tile=='yes')
SNPs <- subset(capture_sequencing, tile=='no')
#remove the version number from transcripts
exon_tiling$transcript <- gsub('\\..*', '', exon_tiling$transcript)
#Upload the ensembl mart
ensembl_us_west = useMart(biomart="ENSEMBL_MART_ENSEMBL", host="grch37.ensembl.org", dataset="hsapiens_gene_ensembl")
#Use the representative transcripts to get the ENSG IDs
ENSG <- getBM(attributes=c('ensembl_gene_id'), filters ='ensembl_transcript_id', values =c(exon_tiling$transcript), mart = ensembl_us_west)
#Use the ENSG IDs to get all ENST IDs assocaited with ENSG
ENST_all <- getBM(attributes=c('ensembl_transcript_id','chromosome_name','exon_chrom_start','exon_chrom_end', 'transcript_biotype'
), filters ='ensembl_gene_id', values =c(ENSG$ensembl_gene_id), mart = ensembl_us_west)
#Filter by protein coding ENSTs
ENST_protein_coding <- subset(ENST_all, ENST_all$transcript_biotype == 'protein_coding')
#Obtain the UTRs for all protein coding ENSTs
ENST_protein_coding_UTRs <- getBM(attributes=c('chromosome_name','exon_chrom_start','exon_chrom_end','5_utr_start', '5_utr_end', '3_utr_start',
'3_utr_end'), filters ='ensembl_transcript_id', values =c(ENST_protein_coding$ensembl_transcript_id),
mart = ensembl_us_west)
#Eliminate exons that is all UTR
ENST_protein_coding_fewer_UTRs <- ENST_protein_coding_UTRs[-which((ENST_protein_coding_UTRs$exon_chrom_start == ENST_protein_coding_UTRs$`5_utr_start` &
ENST_protein_coding_UTRs$exon_chrom_end == ENST_protein_coding_UTRs$`5_utr_end`) |
(ENST_protein_coding_UTRs$exon_chrom_start == ENST_protein_coding_UTRs$`3_utr_start` &
ENST_protein_coding_UTRs$exon_chrom_end == ENST_protein_coding_UTRs$`3_utr_end`) |
(ENST_protein_coding_UTRs$exon_chrom_end == ENST_protein_coding_UTRs$`5_utr_start` &
ENST_protein_coding_UTRs$exon_chrom_start == ENST_protein_coding_UTRs$`5_utr_end`) |
(ENST_protein_coding_UTRs$exon_chrom_end == ENST_protein_coding_UTRs$`3_utr_start` &
ENST_protein_coding_UTRs$exon_chrom_start == ENST_protein_coding_UTRs$`3_utr_end`)
),
]
#Eliminate 5' UTRs
ENST_protein_coding_fewer_UTRs$exon_chrom_end <- apply(ENST_protein_coding_fewer_UTRs, 1, function(x){
if(!is.na(x['5_utr_end']) &
!is.na(x['exon_chrom_end']) &
x['5_utr_end'] == x['exon_chrom_end']){
return(as.numeric(x['5_utr_start'])-1)
} else {
return(x['exon_chrom_end'])
}
})
#Eliminate 5' UTRs
ENST_protein_coding_fewer_UTRs$exon_chrom_start <- apply(ENST_protein_coding_fewer_UTRs, 1, function(x){
if(!is.na(x['5_utr_start']) &
!is.na(x['exon_chrom_start']) &
x['5_utr_start'] == x['exon_chrom_start']){
return(as.numeric(x['5_utr_end'])+1)
} else {
return(x['exon_chrom_start'])
}
})
#Eliminate 3' UTRs
ENST_protein_coding_fewer_UTRs$exon_chrom_end <- apply(ENST_protein_coding_fewer_UTRs, 1, function(x){
if(!is.na(x['3_utr_end']) &
!is.na(x['exon_chrom_end']) &
x['3_utr_end'] == x['exon_chrom_end']){
return(as.numeric(x['3_utr_start'])-1)
} else {
return(x['exon_chrom_end'])
}
})
#Eliminate 3' UTRs
ENST_protein_coding_fewer_UTRs$exon_chrom_start <- apply(ENST_protein_coding_fewer_UTRs, 1, function(x){
if(!is.na(x['3_utr_start']) &
!is.na(x['exon_chrom_start']) &
x['3_utr_start'] == x['exon_chrom_start']){
return(as.numeric(x['3_utr_end'])+1)
} else {
return(x['exon_chrom_start'])
}
})
#Create bed file from final exons
ENST_protein_coding_no_UTRs_bed <- ENST_protein_coding_fewer_UTRs[1:3]
ENST_protein_coding_no_UTRs_bed$chromosome_name <- factor(ENST_protein_coding_no_UTRs_bed$chromosome_name,
levels = c(1:22, 'X', 'Y'))
ENST_protein_coding_no_UTRs_bed$exon_chrom_start <- as.numeric(ENST_protein_coding_no_UTRs_bed$exon_chrom_start)
ENST_protein_coding_no_UTRs_bed$exon_chrom_end <- as.numeric(ENST_protein_coding_no_UTRs_bed$exon_chrom_end)
#Order the bed file based on chromosome then start
ENST_protein_coding_no_UTRs_bed_ordered <- ENST_protein_coding_no_UTRs_bed[with(
ENST_protein_coding_no_UTRs_bed, order(chromosome_name, exon_chrom_start)), ]
ENST_protein_coding_no_UTRs_bed_ordered$exon_chrom_start <- gsub(' ', '', ENST_protein_coding_no_UTRs_bed_ordered$exon_chrom_start)
ENST_protein_coding_no_UTRs_bed_ordered$exon_chrom_end <- gsub(' ', '', ENST_protein_coding_no_UTRs_bed_ordered$exon_chrom_end)
#Print out final file for merging
write.table(ENST_protein_coding_no_UTRs_bed_ordered, file = "ENST_protein_coding_no_UTRs_bed_ordered.bed",
quote=F, sep="\t", row.names=F, col.names=F)
View(SNPs)
View(ENST_protein_coding_no_UTRs_bed_ordered)
View(SNPs)
View(capture_sequencing)
library(bedr)
clear
View(ENST_protein_coding_UTRs)
setwd('/Users/ebarnell/civic-panel/')
#Import Libraries
library(biomaRt)
library(data.table)
library(bedr)
#Read in manually curated tiling
tiling <- read.table('/Users/ebarnell/civic-panel/capture_sequence_tile.txt', head=T, sep='\t')
#Read in captureseq output file from ProbeSelection.py
capture_sequencing <- read.delim('/Users/ebarnell/civic-panel/capture_sequence_probes.tsv', head=T, sep='\t')
capture_sequencing <- subset(capture_sequencing, select=c(gene:stop))
capture_sequencing <- merge(capture_sequencing, tiling, by.x=c('gene', 'soid_name'), by.y = c('gene', 'Mutation'), all.x=TRUE)
exon_tiling <- subset(capture_sequencing, tile=='yes')
SNPs <- subset(capture_sequencing, tile=='no')
#remove the version number from transcripts
exon_tiling$representative_transcript <- gsub('\\..*', '', exon_tiling$representative_transcript)
#Upload the ensembl mart
ensembl_us_west = useMart(biomart="ENSEMBL_MART_ENSEMBL", host="grch37.ensembl.org", dataset="hsapiens_gene_ensembl")
#Use the representative transcripts to get the ENSG IDs
ENSG <- getBM(attributes=c('ensembl_gene_id'), filters ='ensembl_transcript_id', values =c(exon_tiling$representative_transcript), mart = ensembl_us_west)
#Use the ENSG IDs to get all ENST IDs assocaited with ENSG
ENST_all <- getBM(attributes=c('ensembl_transcript_id','chromosome_name','exon_chrom_start','exon_chrom_end', 'transcript_biotype'
), filters ='ensembl_gene_id', values =c(ENSG$ensembl_gene_id), mart = ensembl_us_west)
#Filter by protein coding ENSTs
ENST_protein_coding <- subset(ENST_all, ENST_all$transcript_biotype == 'protein_coding')
#Obtain the UTRs for all protein coding ENSTs
ENST_protein_coding_UTRs <- getBM(attributes=c('chromosome_name','exon_chrom_start','exon_chrom_end','5_utr_start', '5_utr_end', '3_utr_start',
'3_utr_end'), filters ='ensembl_transcript_id', values =c(ENST_protein_coding$ensembl_transcript_id),
mart = ensembl_us_west)
#Eliminate exons that is all UTR
ENST_protein_coding_fewer_UTRs <- ENST_protein_coding_UTRs[-which((ENST_protein_coding_UTRs$exon_chrom_start == ENST_protein_coding_UTRs$`5_utr_start` &
ENST_protein_coding_UTRs$exon_chrom_end == ENST_protein_coding_UTRs$`5_utr_end`) |
(ENST_protein_coding_UTRs$exon_chrom_start == ENST_protein_coding_UTRs$`3_utr_start` &
ENST_protein_coding_UTRs$exon_chrom_end == ENST_protein_coding_UTRs$`3_utr_end`) |
(ENST_protein_coding_UTRs$exon_chrom_end == ENST_protein_coding_UTRs$`5_utr_start` &
ENST_protein_coding_UTRs$exon_chrom_start == ENST_protein_coding_UTRs$`5_utr_end`) |
(ENST_protein_coding_UTRs$exon_chrom_end == ENST_protein_coding_UTRs$`3_utr_start` &
ENST_protein_coding_UTRs$exon_chrom_start == ENST_protein_coding_UTRs$`3_utr_end`)
),
]
#Eliminate 5' UTRs
ENST_protein_coding_fewer_UTRs$exon_chrom_end <- apply(ENST_protein_coding_fewer_UTRs, 1, function(x){
if(!is.na(x['5_utr_end']) &
!is.na(x['exon_chrom_end']) &
x['5_utr_end'] == x['exon_chrom_end']){
return(as.numeric(x['5_utr_start'])-1)
} else {
return(x['exon_chrom_end'])
}
})
#Eliminate 5' UTRs
ENST_protein_coding_fewer_UTRs$exon_chrom_start <- apply(ENST_protein_coding_fewer_UTRs, 1, function(x){
if(!is.na(x['5_utr_start']) &
!is.na(x['exon_chrom_start']) &
x['5_utr_start'] == x['exon_chrom_start']){
return(as.numeric(x['5_utr_end'])+1)
} else {
return(x['exon_chrom_start'])
}
})
#Eliminate 3' UTRs
ENST_protein_coding_fewer_UTRs$exon_chrom_end <- apply(ENST_protein_coding_fewer_UTRs, 1, function(x){
if(!is.na(x['3_utr_end']) &
!is.na(x['exon_chrom_end']) &
x['3_utr_end'] == x['exon_chrom_end']){
return(as.numeric(x['3_utr_start'])-1)
} else {
return(x['exon_chrom_end'])
}
})
#Eliminate 3' UTRs
ENST_protein_coding_fewer_UTRs$exon_chrom_start <- apply(ENST_protein_coding_fewer_UTRs, 1, function(x){
if(!is.na(x['3_utr_start']) &
!is.na(x['exon_chrom_start']) &
x['3_utr_start'] == x['exon_chrom_start']){
return(as.numeric(x['3_utr_end'])+1)
} else {
return(x['exon_chrom_start'])
}
})
#Create bed file from final exons
ENST_protein_coding_no_UTRs_bed <- ENST_protein_coding_fewer_UTRs[1:3]
ENST_protein_coding_no_UTRs_bed$chromosome_name <- factor(ENST_protein_coding_no_UTRs_bed$chromosome_name,
levels = c(1:22, 'X', 'Y'))
ENST_protein_coding_no_UTRs_bed$exon_chrom_start <- as.numeric(ENST_protein_coding_no_UTRs_bed$exon_chrom_start)
ENST_protein_coding_no_UTRs_bed$exon_chrom_end <- as.numeric(ENST_protein_coding_no_UTRs_bed$exon_chrom_end)
#Order the bed file based on chromosome then start
ENST_protein_coding_no_UTRs_bed_ordered <- ENST_protein_coding_no_UTRs_bed[with(
ENST_protein_coding_no_UTRs_bed, order(chromosome_name, exon_chrom_start)), ]
ENST_protein_coding_no_UTRs_bed_ordered$exon_chrom_start <- gsub(' ', '', ENST_protein_coding_no_UTRs_bed_ordered$exon_chrom_start)
ENST_protein_coding_no_UTRs_bed_ordered$exon_chrom_end <- gsub(' ', '', ENST_protein_coding_no_UTRs_bed_ordered$exon_chrom_end)
#Print out final file for merging
write.table(ENST_protein_coding_no_UTRs_bed_ordered, file = "exon_tiling.bed",
quote=F, sep="\t", row.names=F, col.names=F)
setwd('/Users/ebarnell/civic-panel/')
library(biomaRt)
setwd('/Users/ebarnell/civic-panel/')
library(biomaRt)
library(data.table)
library(bedr)
tiling <- read.table('/Users/ebarnell/civic-panel/capture_sequence_tile.txt', head=T, sep='\t')
tiling <- read.table('/Users/ebarnell/civic-panel/tile_classification.txt', head=T, sep='\t')
capture_sequencing <- read.delim('/Users/ebarnell/civic-panel/capture_sequence_probes.tsv', head=T, sep='\t')
capture_sequencing <- subset(capture_sequencing, select=c(gene:stop))
capture_sequencing <- merge(capture_sequencing, tiling, by.x=c('gene', 'soid_name'), by.y = c('gene', 'Mutation'), all.x=TRUE)
View(tiling)
capture_sequencing <- merge(capture_sequencing, tiling, by.x=c('gene', 'variant_name'), by.y = c('gene', 'variant_name'), all.x=TRUE)
exon_tiling <- subset(capture_sequencing, tile=='yes')
SNPs <- subset(capture_sequencing, tile=='no')
exon_tiling$representative_transcript <- gsub('\\..*', '', exon_tiling$representative_transcript)
ensembl_us_west = useMart(biomart="ENSEMBL_MART_ENSEMBL", host="grch37.ensembl.org", dataset="hsapiens_gene_ensembl")
ENSG <- getBM(attributes=c('ensembl_gene_id'), filters ='ensembl_transcript_id', values =c(exon_tiling$representative_transcript), mart = ensembl_us_west)
ENST_all <- getBM(attributes=c('ensembl_transcript_id','chromosome_name','exon_chrom_start','exon_chrom_end', 'transcript_biotype'
), filters ='ensembl_gene_id', values =c(ENSG$ensembl_gene_id), mart = ensembl_us_west)
ENST_protein_coding <- subset(ENST_all, ENST_all$transcript_biotype == 'protein_coding')
ENST_protein_coding_UTRs <- getBM(attributes=c('chromosome_name','exon_chrom_start','exon_chrom_end','5_utr_start', '5_utr_end', '3_utr_start',
'3_utr_end'), filters ='ensembl_transcript_id', values =c(ENST_protein_coding$ensembl_transcript_id),
mart = ensembl_us_west)
ENST_protein_coding_fewer_UTRs <- ENST_protein_coding_UTRs[-which((ENST_protein_coding_UTRs$exon_chrom_start == ENST_protein_coding_UTRs$`5_utr_start` &
ENST_protein_coding_UTRs$exon_chrom_end == ENST_protein_coding_UTRs$`5_utr_end`) |
(ENST_protein_coding_UTRs$exon_chrom_start == ENST_protein_coding_UTRs$`3_utr_start` &
ENST_protein_coding_UTRs$exon_chrom_end == ENST_protein_coding_UTRs$`3_utr_end`) |
(ENST_protein_coding_UTRs$exon_chrom_end == ENST_protein_coding_UTRs$`5_utr_start` &
ENST_protein_coding_UTRs$exon_chrom_start == ENST_protein_coding_UTRs$`5_utr_end`) |
(ENST_protein_coding_UTRs$exon_chrom_end == ENST_protein_coding_UTRs$`3_utr_start` &
ENST_protein_coding_UTRs$exon_chrom_start == ENST_protein_coding_UTRs$`3_utr_end`)
),
]
ENST_protein_coding_fewer_UTRs$exon_chrom_end <- apply(ENST_protein_coding_fewer_UTRs, 1, function(x){
if(!is.na(x['5_utr_end']) &
!is.na(x['exon_chrom_end']) &
x['5_utr_end'] == x['exon_chrom_end']){
return(as.numeric(x['5_utr_start'])-1)
} else {
return(x['exon_chrom_end'])
}
})
ENST_protein_coding_fewer_UTRs$exon_chrom_start <- apply(ENST_protein_coding_fewer_UTRs, 1, function(x){
if(!is.na(x['5_utr_start']) &
!is.na(x['exon_chrom_start']) &
x['5_utr_start'] == x['exon_chrom_start']){
return(as.numeric(x['5_utr_end'])+1)
} else {
return(x['exon_chrom_start'])
}
})
ENST_protein_coding_fewer_UTRs$exon_chrom_end <- apply(ENST_protein_coding_fewer_UTRs, 1, function(x){
if(!is.na(x['3_utr_end']) &
!is.na(x['exon_chrom_end']) &
x['3_utr_end'] == x['exon_chrom_end']){
return(as.numeric(x['3_utr_start'])-1)
} else {
return(x['exon_chrom_end'])
}
})
ENST_protein_coding_fewer_UTRs$exon_chrom_start <- apply(ENST_protein_coding_fewer_UTRs, 1, function(x){
if(!is.na(x['3_utr_start']) &
!is.na(x['exon_chrom_start']) &
x['3_utr_start'] == x['exon_chrom_start']){
return(as.numeric(x['3_utr_end'])+1)
} else {
return(x['exon_chrom_start'])
}
})
ENST_protein_coding_no_UTRs_bed <- ENST_protein_coding_fewer_UTRs[1:3]
ENST_protein_coding_no_UTRs_bed$chromosome_name <- factor(ENST_protein_coding_no_UTRs_bed$chromosome_name,
levels = c(1:22, 'X', 'Y'))
ENST_protein_coding_no_UTRs_bed$exon_chrom_start <- as.numeric(ENST_protein_coding_no_UTRs_bed$exon_chrom_start)
ENST_protein_coding_no_UTRs_bed$exon_chrom_end <- as.numeric(ENST_protein_coding_no_UTRs_bed$exon_chrom_end)
ENST_protein_coding_no_UTRs_bed_ordered <- ENST_protein_coding_no_UTRs_bed[with(
ENST_protein_coding_no_UTRs_bed, order(chromosome_name, exon_chrom_start)), ]
ENST_protein_coding_no_UTRs_bed_ordered$exon_chrom_start <- gsub(' ', '', ENST_protein_coding_no_UTRs_bed_ordered$exon_chrom_start)
ENST_protein_coding_no_UTRs_bed_ordered$exon_chrom_end <- gsub(' ', '', ENST_protein_coding_no_UTRs_bed_ordered$exon_chrom_end)
write.table(ENST_protein_coding_no_UTRs_bed_ordered, file = "exon_tiling.bed",
quote=F, sep="\t", row.names=F, col.names=F)
write.table(ENST_protein_coding_no_UTRs_bed_ordered, file = "coordinates.txt",
quote=F, sep="\t", row.names=F, col.names=F)
if (check.binary("bedtools")) {
set.seed(666)
if (check.binary("bedtools")) {
set.seed(666)}
bedr(engine = "bedtools", input=list(ENST_protein_coding_no_UTRs_bed_ordered, method=merge)
bedr(engine = "bedtools", input=list(ENST_protein_coding_no_UTRs_bed_ordered), method='merge')
View(ENST_protein_coding_no_UTRs_bed_ordered)
bedr(engine = "bedtools", params = NULL, input=list(ENST_protein_coding_no_UTRs_bed_ordered), method='merge')
if (check.binary("bedtools")) {
index <- ENST_protein_coding_no_UTRs_bed_ordered;
a <- index[[1]];
a.sort <- bedr.sort.region(a);
a.merged <- bedr.merge.region(a.sort);
}
setwd('/Users/ebarnell/civic-panel/')
#Import Libraries
library(biomaRt)
library(data.table)
library(bedr)
tiling <- read.table('/Users/ebarnell/civic-panel/tile_classification.txt', head=T, sep='\t')
capture_sequencing <- read.delim('/Users/ebarnell/civic-panel/capture_sequence_probes.tsv', head=T, sep='\t')
capture_sequencing <- subset(capture_sequencing, select=c(gene:stop))
capture_sequencing <- merge(capture_sequencing, tiling, by.x=c('gene', 'variant_name'), by.y = c('gene', 'variant_name'), all.x=TRUE)
View(capture_sequencing)
setwd('/Users/ebarnell/civic-panel/')
#Import Libraries
library(biomaRt)
library(data.table)
library(bedr)
tiling <- read.table('/Users/ebarnell/civic-panel/tile_classification.txt', head=T, sep='\t')
setwd('/Users/ebarnell/civic-panel/')
#Import Libraries
library(biomaRt)
library(data.table)
library(bedr)
tiling <- read.table('/Users/ebarnell/civic-panel/tile_classification.txt', head=T, sep='\t')
setwd('/Users/ebarnell/civic-panel/')
#Import Libraries
library(biomaRt)
library(data.table)
library(bedr)
tiling <- read.table('/Users/ebarnell/civic-panel/tile_classification.txt', head=T, sep='\t')
tiling <- read.table('/Users/ebarnell/civic-panel/tile_classification.txt', head=T, sep='\t')
capture_sequencing <- read.delim('/Users/ebarnell/civic-panel/capture_sequence_probes.tsv', head=T, sep='\t')
View(capture_sequencing)
capture_sequencing <- merge(capture_sequencing, tiling, by.x=c('gene', 'variant_name'), by.y = c('gene', 'variant_name'), all.x=TRUE)
View(capture_sequencing)
exon_tiling <- subset(capture_sequencing, tile=='yes')
single_probe <- subset(capture_sequencing, tile=='no')
exon_tiling$representative_transcript <- gsub('\\..*', '', exon_tiling$representative_transcript)
ensembl_us_west = useMart(biomart="ENSEMBL_MART_ENSEMBL", host="grch37.ensembl.org", dataset="hsapiens_gene_ensembl")
ENSG <- getBM(attributes=c('ensembl_gene_id'), filters ='ensembl_transcript_id', values =c(exon_tiling$representative_transcript), mart = ensembl_us_west)
ENST_all <- getBM(attributes=c('ensembl_transcript_id','chromosome_name','exon_chrom_start','exon_chrom_end', 'transcript_biotype'
), filters ='ensembl_gene_id', values =c(ENSG$ensembl_gene_id), mart = ensembl_us_west)
ENST_protein_coding <- subset(ENST_all, ENST_all$transcript_biotype == 'protein_coding')
ENST_protein_coding_UTRs <- getBM(attributes=c('chromosome_name','exon_chrom_start','exon_chrom_end','5_utr_start', '5_utr_end', '3_utr_start',
'3_utr_end'), filters ='ensembl_transcript_id', values =c(ENST_protein_coding$ensembl_transcript_id),
mart = ensembl_us_west)
ENST_protein_coding_fewer_UTRs <- ENST_protein_coding_UTRs[-which((ENST_protein_coding_UTRs$exon_chrom_start == ENST_protein_coding_UTRs$`5_utr_start` &
ENST_protein_coding_UTRs$exon_chrom_end == ENST_protein_coding_UTRs$`5_utr_end`) |
(ENST_protein_coding_UTRs$exon_chrom_start == ENST_protein_coding_UTRs$`3_utr_start` &
ENST_protein_coding_UTRs$exon_chrom_end == ENST_protein_coding_UTRs$`3_utr_end`) |
(ENST_protein_coding_UTRs$exon_chrom_end == ENST_protein_coding_UTRs$`5_utr_start` &
ENST_protein_coding_UTRs$exon_chrom_start == ENST_protein_coding_UTRs$`5_utr_end`) |
(ENST_protein_coding_UTRs$exon_chrom_end == ENST_protein_coding_UTRs$`3_utr_start` &
ENST_protein_coding_UTRs$exon_chrom_start == ENST_protein_coding_UTRs$`3_utr_end`)
),
]
ENST_protein_coding_fewer_UTRs$exon_chrom_end <- apply(ENST_protein_coding_fewer_UTRs, 1, function(x){
if(!is.na(x['5_utr_end']) &
!is.na(x['exon_chrom_end']) &
x['5_utr_end'] == x['exon_chrom_end']){
return(as.numeric(x['5_utr_start'])-1)
} else {
return(x['exon_chrom_end'])
}
})
ENST_protein_coding_fewer_UTRs$exon_chrom_start <- apply(ENST_protein_coding_fewer_UTRs, 1, function(x){
if(!is.na(x['5_utr_start']) &
!is.na(x['exon_chrom_start']) &
x['5_utr_start'] == x['exon_chrom_start']){
return(as.numeric(x['5_utr_end'])+1)
} else {
return(x['exon_chrom_start'])
}
})
ENST_protein_coding_fewer_UTRs$exon_chrom_end <- apply(ENST_protein_coding_fewer_UTRs, 1, function(x){
if(!is.na(x['3_utr_end']) &
!is.na(x['exon_chrom_end']) &
x['3_utr_end'] == x['exon_chrom_end']){
return(as.numeric(x['3_utr_start'])-1)
} else {
return(x['exon_chrom_end'])
}
})
ENST_protein_coding_fewer_UTRs$exon_chrom_start <- apply(ENST_protein_coding_fewer_UTRs, 1, function(x){
if(!is.na(x['3_utr_start']) &
!is.na(x['exon_chrom_start']) &
x['3_utr_start'] == x['exon_chrom_start']){
return(as.numeric(x['3_utr_end'])+1)
} else {
return(x['exon_chrom_start'])
}
})
ENST_protein_coding_no_UTRs_bed <- ENST_protein_coding_fewer_UTRs[1:3]
ENST_protein_coding_no_UTRs_bed$chromosome_name <- factor(ENST_protein_coding_no_UTRs_bed$chromosome_name,
levels = c(1:22, 'X', 'Y'))
ENST_protein_coding_no_UTRs_bed$exon_chrom_start <- as.numeric(ENST_protein_coding_no_UTRs_bed$exon_chrom_start)
ENST_protein_coding_no_UTRs_bed$exon_chrom_end <- as.numeric(ENST_protein_coding_no_UTRs_bed$exon_chrom_end)
ENST_protein_coding_no_UTRs_bed_ordered <- ENST_protein_coding_no_UTRs_bed[with(
ENST_protein_coding_no_UTRs_bed, order(chromosome_name, exon_chrom_start)), ]
ENST_protein_coding_no_UTRs_bed_ordered$exon_chrom_start <- gsub(' ', '', ENST_protein_coding_no_UTRs_bed_ordered$exon_chrom_start)
ENST_protein_coding_no_UTRs_bed_ordered$exon_chrom_end <- gsub(' ', '', ENST_protein_coding_no_UTRs_bed_ordered$exon_chrom_end)
View(single_probe)
single_probe[1]
single_probe[1,2]
single_probe[1:2]
single_probe[1:2,11:13]
single_probe[1:2][11:13]
single_probe[1:2 &11:13]
single_probe[1:2,11:13]
single_probe[(1:2,11:13)]
single_probe[(c(1:2,11:13))]
