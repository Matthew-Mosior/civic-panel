representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
View(representative_transcripts)
representative_transcripts <- gsub('.*', '', representative_transcripts)
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts <- gsub('.', '', representative_transcripts)
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts <- gsub('\.*', '', representative_transcripts)
representative_transcripts <- gsub('.*', '', representative_transcripts)
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts <- gsub('..*', '', representative_transcripts)
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts <- gsub('.\\d', '', representative_transcripts)
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts <- gsub('.', ' ', representative_transcripts)
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts <- gsub('\\.', ' ', representative_transcripts)
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts <- gsub('[.]', ' ', representative_transcripts)
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts$transcript_ID <- gsub('[.]', ' ', representative_transcripts)
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts$transcript_ID <- gsub('[.]', ' ', representative_transcripts$transcript_I)
representative_transcripts$transcript_ID <- gsub('[.]*', ' ', representative_transcripts$transcript_I)
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts$transcript_ID <- gsub('[.]', '', representative_transcripts$transcript_I)
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts$transcript_ID <- gsub('[.]*', '', representative_transcripts$transcript_I)
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts$transcript_ID <- gsub('[.]*', '', representative_transcripts$transcript_I)
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts$transcript_ID <- gsub('[.]*', '', representative_transcripts$transcript_I)
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts$transcript_ID <- gsub('.*', '', representative_transcripts$transcript_I)
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts$transcript_ID <- gsub('\\..*', '', representative_transcripts$transcript_I)
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts$transcript_ID <- gsub('\\..*', '', representative_transcripts$transcript_ID)
grch37 = useEnsembl(biomart="ensembl",GRCh=37)
listDatasets(grch37)[31:35,]
listDatasets(grch37)[31]
listDatasets(grch37)[1:31]
listDatasets(grch37)[1:31,]
head(listFilters(ensembl))
library(biomaRt)
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts$transcript_ID <- gsub('\\..*', '', representative_transcripts$transcript_ID)
ensembl = useEnsembl(biomart="ensembl",GRCh=37, dataset='hsapiens_gene_ensembl')
head(listFilters(ensembl))
head(listAttributes(ensembl))
getBM(attributes = c('ensembl_gene_id', filters = 'ensembl_transcript_id', values = representative_transcripts))
getBM(attributes = c('ensembl_gene_id', filters = 'ensembl_transcript_id', values = representative_transcripts, mart = ensembl))
ensembl = useEnsembl(biomart="ensembl",GRCh=37, dataset='hsapiens_gene_ensembl')
getBM(attributes = c('ensembl_gene_id', filters = 'ensembl_transcript_id', values = representative_transcripts, mart = ensembl))
ensembl = useEnsembl(biomart="ensembl", dataset="hsapiens_gene_ensembl")
ENSG_all <- getBM(attributes = c('ensembl_gene_id', filters = 'ensembl_transcript_id', values = representative_transcripts, mart = ensembl))
?useMart
ensembl = useMart(biomart="ensembl", dataset="hsapiens_gene_ensembl", host="www.ensembl.org")
ENSG_all <- getBM(attributes = c('ensembl_gene_id', filters = 'ensembl_transcript_id', values = representative_transcripts, mart = ensembl))
ENSG_all <- getBM(attributes = c('ensembl_gene_id', filters = 'ensembl_transcript_id', values = 'ENSG00000139618', mart = ensembl))
listMarts
listMarts()
ensembl = useMartl(biomart="ENSEMBL_MART_ENSEMBL", dataset="hsapiens_gene_ensembl")
ENSG_all <- getBM(attributes = c('ensembl_gene_id', filters = 'ensembl_transcript_id', values = 'ENSG00000139618', mart = ensembl))
ensembl = useMart(biomart="ENSEMBL_MART_ENSEMBL", dataset="hsapiens_gene_ensembl")
ENSG_all <- getBM(attributes = c('ensembl_gene_id', filters = 'ensembl_transcript_id', values = 'ENSG00000139618', mart = ensembl))
useMart('ensembl')
listDatasets(mart)
listDatasets(useMart('ensembl'))
ensembl = useEnsembl(biomart="ensembl", dataset="hsapiens_gene_ensembl")
ensembl = useEnsembl(biomart="ensembl", dataset="hsapiens_gene_ensembl", GRCh=37)
ENSG_all <- getBM(attributes = c('ensembl_gene_id', filters = 'ensembl_transcript_id', values = 'ENSG00000139618', mart = ensembl))
ensembl = useEnsembl("ENSEMBL_MART_ENSEMBL", dataset="hsapiens_gene_ensembl", GRCh=37)
ENSG_all <- getBM(attributes = c('ensembl_gene_id', filters = 'ensembl_transcript_id', values = 'ENSG00000139618', mart = ensembl))
ensembl = useMart("ENSEMBL_MART_ENSEMBL", dataset = "hsapiens_gene_ensembl", host = "grch37.ensembl.org")
ENSG_all <- getBM(attributes = c('ensembl_gene_id', filters = 'ensembl_transcript_id', values = 'ENSG00000139618', mart = ensembl))
if(interactive()){
mart = useMart("ensembl")
mart=useMart(biomart="ensembl", dataset="hsapiens_gene_ensembl")
}
ENSG_all <- getBM(attributes = c('ensembl_gene_id', filters = 'ensembl_transcript_id', values = 'ENSG00000139618', mart = ensembl))
mart = useMart("ensembl")
ENSG_all <- getBM(attributes = c('ensembl_gene_id', filters = 'ensembl_transcript_id', values = 'ENSG00000139618', mart = ensembl))
mart = useMart("ensembl")
ENSG_all <- getBM(attributes = c('ensembl_gene_id', filters = 'ensembl_transcript_id', values = 'ENSG00000139618', mart = mart))
mart=useMart(biomart="ensembl", dataset="hsapiens_gene_ensembl")
ENSG_all <- getBM(attributes = c('ensembl_gene_id', filters = 'ensembl_transcript_id', values = 'ENSG00000139618', mart = mart))
?useMart
if(interactive()){
mart = useMart("ensembl")
mart=useMart(biomart="ensembl", dataset="hsapiens_gene_ensembl")
}
ENSG_all <- getBM(attributes = c('ensembl_gene_id', filters = 'ensembl_transcript_id', values = 'ENSG00000139618', mart = mart))
setwd('/Users/ebarnell/civic-panel/')
#Import Libraries
library(biomaRt)
library(data.table)
#Read in manually curated tiling
tiling <- read.table('/Users/ebarnell/civic-panel/tile_classification.txt', head=T, sep='\t')
#Read in captureseq output file from ProbeSelection.py
capture_sequencing <- read.delim('/Users/ebarnell/civic-panel/capture_sequence_probes.tsv', head=T, sep='\t')
#Merge tiling file and capture sequencing file
capture_sequencing <- merge(capture_sequencing, tiling, by.x=c('gene', 'variant_name'), by.y = c('gene', 'variant_name'), all.x=TRUE)
exon_tiling <- subset(capture_sequencing, tile=='yes')
exon_tiling$representative_transcript <- gsub('\\..*', '', exon_tiling$representative_transcript)
ensembl_us_west = useMart(biomart="ENSEMBL_MART_ENSEMBL", host="grch37.ensembl.org", dataset="hsapiens_gene_ensembl")
ENSG <- getBM(attributes=c('ensembl_gene_id'), filters ='ensembl_transcript_id', values =c(exon_tiling$representative_transcript), mart = ensembl_us_west)
ENST_all <- getBM(attributes=c('ensembl_transcript_id','chromosome_name','exon_chrom_start','exon_chrom_end', 'transcript_biotype'
), filters ='ensembl_gene_id', values =c(ENSG$ensembl_gene_id), mart = ensembl_us_west)
ENST_protein_coding <- subset(ENST_all, ENST_all$transcript_biotype == 'protein_coding')
View(tiling)
View(tiling)
View(exon_tiling)
View(ENST_protein_coding)
ENST_protein_coding <- subset(ENST_all, ENST_all$transcript_biotype == 'protein_coding')
View(ENST_protein_coding)
ENST_protein_coding_UTRs <- getBM(attributes=c('chromosome_name','exon_chrom_start','exon_chrom_end','5_utr_start', '5_utr_end', '3_utr_start', 'gene_name'
'3_utr_end'), filters ='ensembl_transcript_id', values =c(ENST_protein_coding$ensembl_transcript_id),
mart = ensembl_us_west)
ENST_protein_coding_UTRs <- getBM(attributes=c('chromosome_name','exon_chrom_start','exon_chrom_end','5_utr_start', '5_utr_end', '3_utr_start', 'gene_name',
'3_utr_end'), filters ='ensembl_transcript_id', values =c(ENST_protein_coding$ensembl_transcript_id),
mart = ensembl_us_west)
ENST_protein_coding_UTRs <- getBM(attributes=c('chromosome_name','exon_chrom_start','exon_chrom_end','5_utr_start', '5_utr_end', '3_utr_start',
'3_utr_end'), filters ='ensembl_transcript_id', values =c(ENST_protein_coding$ensembl_transcript_id),
mart = ensembl_us_west)
View(ENST_protein_coding_UTRs)
View(ENST_protein_coding)
getBM?getBM()
getBMlist()
getBMlist(ensembl_us_west)
getBMlist(attributes)
getBMlist()?
getBMlist(attributes, mart)
listAttributes()
listAttributes(mart)
listAttributes(filters ='ensembl_transcript_id', values =c(ENST_protein_coding$ensembl_transcript_id),
mart = ensembl_us_west)
listAttributes(filters ='ensembl_transcript_id', mart= ensembl_us_west
listAttributes(filters ='ensembl_transcript_id', mart= ensembl_us_west)
listAttributes(mart= ensembl_us_west)
ENST_protein_coding_UTRs <- getBM(attributes=c('ensembl_gene_id', 'ensembl_transcript_id', 'chromosome_name','exon_chrom_start','exon_chrom_end','5_utr_start', '5_utr_end', '3_utr_start',
'3_utr_end'), filters ='ensembl_transcript_id', values =c(ENST_protein_coding$ensembl_transcript_id),
mart = ensembl_us_west)
ENST_protein_coding_fewer_UTRs <- ENST_protein_coding_UTRs[-which((ENST_protein_coding_UTRs$exon_chrom_start == ENST_protein_coding_UTRs$`5_utr_start` &
ENST_protein_coding_UTRs$exon_chrom_end == ENST_protein_coding_UTRs$`5_utr_end`) |
(ENST_protein_coding_UTRs$exon_chrom_start == ENST_protein_coding_UTRs$`3_utr_start` &
ENST_protein_coding_UTRs$exon_chrom_end == ENST_protein_coding_UTRs$`3_utr_end`) |
(ENST_protein_coding_UTRs$exon_chrom_end == ENST_protein_coding_UTRs$`5_utr_start` &
ENST_protein_coding_UTRs$exon_chrom_start == ENST_protein_coding_UTRs$`5_utr_end`) |
(ENST_protein_coding_UTRs$exon_chrom_end == ENST_protein_coding_UTRs$`3_utr_start` &
ENST_protein_coding_UTRs$exon_chrom_start == ENST_protein_coding_UTRs$`3_utr_end`)
),
]
ENST_protein_coding_fewer_UTRs$exon_chrom_end <- apply(ENST_protein_coding_fewer_UTRs, 1, function(x){
if(!is.na(x['5_utr_end']) &
!is.na(x['exon_chrom_end']) &
x['5_utr_end'] == x['exon_chrom_end']){
return(as.numeric(x['5_utr_start'])-1)
} else {
return(x['exon_chrom_end'])
}
})
ENST_protein_coding_fewer_UTRs$exon_chrom_start <- apply(ENST_protein_coding_fewer_UTRs, 1, function(x){
if(!is.na(x['5_utr_start']) &
!is.na(x['exon_chrom_start']) &
x['5_utr_start'] == x['exon_chrom_start']){
return(as.numeric(x['5_utr_end'])+1)
} else {
return(x['exon_chrom_start'])
}
})
ENST_protein_coding_fewer_UTRs$exon_chrom_end <- apply(ENST_protein_coding_fewer_UTRs, 1, function(x){
if(!is.na(x['3_utr_end']) &
!is.na(x['exon_chrom_end']) &
x['3_utr_end'] == x['exon_chrom_end']){
return(as.numeric(x['3_utr_start'])-1)
} else {
return(x['exon_chrom_end'])
}
})
ENST_protein_coding_fewer_UTRs$exon_chrom_start <- apply(ENST_protein_coding_fewer_UTRs, 1, function(x){
if(!is.na(x['3_utr_start']) &
!is.na(x['exon_chrom_start']) &
x['3_utr_start'] == x['exon_chrom_start']){
return(as.numeric(x['3_utr_end'])+1)
} else {
return(x['exon_chrom_start'])
}
})
View(ENST_all)
View(ENSG)
View(exon_tiling)
View(exon_tiling)
#pull variants that require only one probe for analysis
single_probe <- subset(capture_sequencing, tile=='no')
single_probe <- single_probe[11:13]
View(single_probe)
single_probe <- single_probe[11:16]
single_probe <- subset(capture_sequencing, tile=='no')
View(single_probe)
single_probe <- single_probe[c(1,2,11:14)]
single_probe <- single_probe[c(11:13,1,2,14)]
single_probe <- single_probe[c(1,2,11:14)]
single_probe <- subset(capture_sequencing, tile=='no')
single_probe <- single_probe[c(11:13,1,2,14)]
#pull variants that need to be tiled
exon_tiling <- subset(capture_sequencing, tile=='yes')
#remove the version number from transcripts
exon_tiling$representative_transcript <- gsub('\\..*', '', exon_tiling$representative_transcript)
#Upload the ensembl mart
ensembl_us_west = useMart(biomart="ENSEMBL_MART_ENSEMBL", host="grch37.ensembl.org", dataset="hsapiens_gene_ensembl")
#Use the representative transcripts to get the ENSG IDs
ENSG <- getBM(attributes=c('ensembl_gene_id'), filters ='ensembl_transcript_id', values =c(exon_tiling$representative_transcript), mart = ensembl_us_west)
#Use the ENSG IDs to get all ENST IDs assocaited with ENSG
ENST_all <- getBM(attributes=c('ensembl_transcript_id','chromosome_name','exon_chrom_start','exon_chrom_end', 'transcript_biotype'
), filters ='ensembl_gene_id', values =c(ENSG$ensembl_gene_id), mart = ensembl_us_west)
#Filter by protein coding ENSTs
ENST_protein_coding <- subset(ENST_all, ENST_all$transcript_biotype == 'protein_coding')
#Obtain the UTRs for all protein coding ENSTs
ENST_protein_coding_UTRs <- getBM(attributes=c('ensembl_gene_id', 'ensembl_transcript_id', 'chromosome_name','exon_chrom_start','exon_chrom_end','5_utr_start', '5_utr_end', '3_utr_start',
'3_utr_end'), filters ='ensembl_transcript_id', values =c(ENST_protein_coding$ensembl_transcript_id),
mart = ensembl_us_west)
#Eliminate exons that is all UTR
ENST_protein_coding_fewer_UTRs <- ENST_protein_coding_UTRs[-which((ENST_protein_coding_UTRs$exon_chrom_start == ENST_protein_coding_UTRs$`5_utr_start` &
ENST_protein_coding_UTRs$exon_chrom_end == ENST_protein_coding_UTRs$`5_utr_end`) |
(ENST_protein_coding_UTRs$exon_chrom_start == ENST_protein_coding_UTRs$`3_utr_start` &
ENST_protein_coding_UTRs$exon_chrom_end == ENST_protein_coding_UTRs$`3_utr_end`) |
(ENST_protein_coding_UTRs$exon_chrom_end == ENST_protein_coding_UTRs$`5_utr_start` &
ENST_protein_coding_UTRs$exon_chrom_start == ENST_protein_coding_UTRs$`5_utr_end`) |
(ENST_protein_coding_UTRs$exon_chrom_end == ENST_protein_coding_UTRs$`3_utr_start` &
ENST_protein_coding_UTRs$exon_chrom_start == ENST_protein_coding_UTRs$`3_utr_end`)
),
]
#Eliminate 5' UTRs
ENST_protein_coding_fewer_UTRs$exon_chrom_end <- apply(ENST_protein_coding_fewer_UTRs, 1, function(x){
if(!is.na(x['5_utr_end']) &
!is.na(x['exon_chrom_end']) &
x['5_utr_end'] == x['exon_chrom_end']){
return(as.numeric(x['5_utr_start'])-1)
} else {
return(x['exon_chrom_end'])
}
})
#Eliminate 5' UTRs
ENST_protein_coding_fewer_UTRs$exon_chrom_start <- apply(ENST_protein_coding_fewer_UTRs, 1, function(x){
if(!is.na(x['5_utr_start']) &
!is.na(x['exon_chrom_start']) &
x['5_utr_start'] == x['exon_chrom_start']){
return(as.numeric(x['5_utr_end'])+1)
} else {
return(x['exon_chrom_start'])
}
})
#Eliminate 3' UTRs
ENST_protein_coding_fewer_UTRs$exon_chrom_end <- apply(ENST_protein_coding_fewer_UTRs, 1, function(x){
if(!is.na(x['3_utr_end']) &
!is.na(x['exon_chrom_end']) &
x['3_utr_end'] == x['exon_chrom_end']){
return(as.numeric(x['3_utr_start'])-1)
} else {
return(x['exon_chrom_end'])
}
})
#Eliminate 3' UTRs
ENST_protein_coding_fewer_UTRs$exon_chrom_start <- apply(ENST_protein_coding_fewer_UTRs, 1, function(x){
if(!is.na(x['3_utr_start']) &
!is.na(x['exon_chrom_start']) &
x['3_utr_start'] == x['exon_chrom_start']){
return(as.numeric(x['3_utr_end'])+1)
} else {
return(x['exon_chrom_start'])
}
})
#Create bed file from final exons
ENST_protein_coding_no_UTRs_bed <- ENST_protein_coding_fewer_UTRs[1:3]
ENST_protein_coding_no_UTRs_bed$chromosome_name <- factor(ENST_protein_coding_no_UTRs_bed$chromosome_name,
levels = c(1:22, 'X', 'Y'))
ENST_protein_coding_no_UTRs_bed$exon_chrom_start <- as.numeric(ENST_protein_coding_no_UTRs_bed$exon_chrom_start)
ENST_protein_coding_no_UTRs_bed$exon_chrom_end <- as.numeric(ENST_protein_coding_no_UTRs_bed$exon_chrom_end)
setwd('/Users/ebarnell/civic-panel/')
#Import Libraries
library(biomaRt)
library(data.table)
#Read
tiling <- read.table('/Users/ebarnell/civic-panel/tile_classification.txt', head=T, sep='\t')
capture_sequencing <- read.delim('/Users/ebarnell/civic-panel/capture_sequence_probes.tsv', head=T, sep='\t')
capture_sequencing <- merge(capture_sequencing, tiling, by.x=c('gene', 'variant_name'), by.y = c('gene', 'variant_name'), all.x=TRUE)
exon_tiling <- subset(capture_sequencing, tile=='yes')
exon_tiling$representative_transcript <- gsub('\\..*', '', exon_tiling$representative_transcript)
ensembl_us_west = useMart(biomart="ENSEMBL_MART_ENSEMBL", host="grch37.ensembl.org", dataset="hsapiens_gene_ensembl")
ENSG <- getBM(attributes=c('ensembl_gene_id'), filters ='ensembl_transcript_id', values =c(exon_tiling$representative_transcript), mart = ensembl_us_west)
ENST_all <- getBM(attributes=c('ensembl_transcript_id','chromosome_name','exon_chrom_start','exon_chrom_end', 'transcript_biotype'
), filters ='ensembl_gene_id', values =c(ENSG$ensembl_gene_id), mart = ensembl_us_west)
ENST_protein_coding <- subset(ENST_all, ENST_all$transcript_biotype == 'protein_coding')
ENST_protein_coding_UTRs <- getBM(attributes=c('ensembl_gene_id', 'ensembl_transcript_id', 'chromosome_name','exon_chrom_start','exon_chrom_end','5_utr_start', '5_utr_end', '3_utr_start',
'3_utr_end'), filters ='ensembl_transcript_id', values =c(ENST_protein_coding$ensembl_transcript_id),
mart = ensembl_us_west)
ENST_protein_coding_fewer_UTRs <- ENST_protein_coding_UTRs[-which((ENST_protein_coding_UTRs$exon_chrom_start == ENST_protein_coding_UTRs$`5_utr_start` &
ENST_protein_coding_UTRs$exon_chrom_end == ENST_protein_coding_UTRs$`5_utr_end`) |
(ENST_protein_coding_UTRs$exon_chrom_start == ENST_protein_coding_UTRs$`3_utr_start` &
ENST_protein_coding_UTRs$exon_chrom_end == ENST_protein_coding_UTRs$`3_utr_end`) |
(ENST_protein_coding_UTRs$exon_chrom_end == ENST_protein_coding_UTRs$`5_utr_start` &
ENST_protein_coding_UTRs$exon_chrom_start == ENST_protein_coding_UTRs$`5_utr_end`) |
(ENST_protein_coding_UTRs$exon_chrom_end == ENST_protein_coding_UTRs$`3_utr_start` &
ENST_protein_coding_UTRs$exon_chrom_start == ENST_protein_coding_UTRs$`3_utr_end`)
),
]
ENST_protein_coding_fewer_UTRs$exon_chrom_end <- apply(ENST_protein_coding_fewer_UTRs, 1, function(x){
if(!is.na(x['5_utr_end']) &
!is.na(x['exon_chrom_end']) &
x['5_utr_end'] == x['exon_chrom_end']){
return(as.numeric(x['5_utr_start'])-1)
} else {
return(x['exon_chrom_end'])
}
})
ENST_protein_coding_fewer_UTRs$exon_chrom_start <- apply(ENST_protein_coding_fewer_UTRs, 1, function(x){
if(!is.na(x['5_utr_start']) &
!is.na(x['exon_chrom_start']) &
x['5_utr_start'] == x['exon_chrom_start']){
return(as.numeric(x['5_utr_end'])+1)
} else {
return(x['exon_chrom_start'])
}
})
ENST_protein_coding_fewer_UTRs$exon_chrom_end <- apply(ENST_protein_coding_fewer_UTRs, 1, function(x){
if(!is.na(x['3_utr_end']) &
!is.na(x['exon_chrom_end']) &
x['3_utr_end'] == x['exon_chrom_end']){
return(as.numeric(x['3_utr_start'])-1)
} else {
return(x['exon_chrom_end'])
}
})
ENST_protein_coding_fewer_UTRs$exon_chrom_start <- apply(ENST_protein_coding_fewer_UTRs, 1, function(x){
if(!is.na(x['3_utr_start']) &
!is.na(x['exon_chrom_start']) &
x['3_utr_start'] == x['exon_chrom_start']){
return(as.numeric(x['3_utr_end'])+1)
} else {
return(x['exon_chrom_start'])
}
})
ENST_protein_coding_no_UTRs_bed <- ENST_protein_coding_fewer_UTRs[1:3]
ENST_protein_coding_no_UTRs_bed$chromosome_name <- factor(ENST_protein_coding_no_UTRs_bed$chromosome_name,
levels = c(1:22, 'X', 'Y'))
ENST_protein_coding_no_UTRs_bed$exon_chrom_start <- as.numeric(ENST_protein_coding_no_UTRs_bed$exon_chrom_start)
View(ENST_protein_coding_UTRs)
View(ENST_protein_coding_no_UTRs_bed)
View(ENST_protein_coding_fewer_UTRs)
ENST_protein_coding_no_UTRs_bed <- ENST_protein_coding_fewer_UTRs[1:5]
ENST_protein_coding_no_UTRs_bed$chromosome_name <- factor(ENST_protein_coding_no_UTRs_bed$chromosome_name,
levels = c(1:22, 'X', 'Y'))
ENST_protein_coding_no_UTRs_bed$exon_chrom_start <- as.numeric(ENST_protein_coding_no_UTRs_bed$exon_chrom_start)
ENST_protein_coding_no_UTRs_bed$exon_chrom_end <- as.numeric(ENST_protein_coding_no_UTRs_bed$exon_chrom_end)
View(ENST_protein_coding_no_UTRs_bed)
ENST_protein_coding_UTRs <- getBM(attributes=c('external_gene_name', 'ensembl_transcript_id', 'chromosome_name','exon_chrom_start','exon_chrom_end','5_utr_start', '5_utr_end', '3_utr_start',
'3_utr_end'), filters ='ensembl_transcript_id', values =c(ENST_protein_coding$ensembl_transcript_id),
mart = ensembl_us_west)
View(ENST_all)
View(ENST_all)
View(ENST_protein_coding)
View(ENST_protein_coding_fewer_UTRs)
View(ENST_protein_coding_no_UTRs_bed)
View(ENST_protein_coding_UTRs)
setwd('/Users/ebarnell/civic-panel/')
#Import Libraries
library(biomaRt)
library(data.table)
#Read in manually curated tiling
tiling <- read.table('/Users/ebarnell/civic-panel/tile_classification.txt', head=T, sep='\t')
#Read in captureseq output file from ProbeSelection.py
capture_sequencing <- read.delim('/Users/ebarnell/civic-panel/capture_sequence_probes.tsv', head=T, sep='\t')
#Merge tiling file and capture sequencing file
capture_sequencing <- merge(capture_sequencing, tiling, by.x=c('gene', 'variant_name'), by.y = c('gene', 'variant_name'), all.x=TRUE)
##################################
## Analyze Exon Tiling Variants ##
##################################
#pull variants that need to be tiled
exon_tiling <- subset(capture_sequencing, tile=='yes')
#remove the version number from transcripts
exon_tiling$representative_transcript <- gsub('\\..*', '', exon_tiling$representative_transcript)
#Upload the ensembl mart
ensembl_us_west = useMart(biomart="ENSEMBL_MART_ENSEMBL", host="grch37.ensembl.org", dataset="hsapiens_gene_ensembl")
#Use the representative transcripts to get the ENSG IDs
ENSG <- getBM(attributes=c('ensembl_gene_id'), filters ='ensembl_transcript_id', values =c(exon_tiling$representative_transcript), mart = ensembl_us_west)
#Use the ENSG IDs to get all ENST IDs assocaited with ENSG
ENST_all <- getBM(attributes=c('ensembl_transcript_id','chromosome_name','exon_chrom_start','exon_chrom_end', 'transcript_biotype'
), filters ='ensembl_gene_id', values =c(ENSG$ensembl_gene_id), mart = ensembl_us_west)
#Filter by protein coding ENSTs
ENST_protein_coding <- subset(ENST_all, ENST_all$transcript_biotype == 'protein_coding')
#Obtain the UTRs for all protein coding ENSTs
ENST_protein_coding_UTRs <- getBM(attributes=c('external_gene_name', 'ensembl_transcript_id', 'chromosome_name','exon_chrom_start','exon_chrom_end','5_utr_start', '5_utr_end', '3_utr_start',
'3_utr_end'), filters ='ensembl_transcript_id', values =c(ENST_protein_coding$ensembl_transcript_id),
mart = ensembl_us_west)
#Eliminate exons that is all UTR
ENST_protein_coding_fewer_UTRs <- ENST_protein_coding_UTRs[-which((ENST_protein_coding_UTRs$exon_chrom_start == ENST_protein_coding_UTRs$`5_utr_start` &
ENST_protein_coding_UTRs$exon_chrom_end == ENST_protein_coding_UTRs$`5_utr_end`) |
(ENST_protein_coding_UTRs$exon_chrom_start == ENST_protein_coding_UTRs$`3_utr_start` &
ENST_protein_coding_UTRs$exon_chrom_end == ENST_protein_coding_UTRs$`3_utr_end`) |
(ENST_protein_coding_UTRs$exon_chrom_end == ENST_protein_coding_UTRs$`5_utr_start` &
ENST_protein_coding_UTRs$exon_chrom_start == ENST_protein_coding_UTRs$`5_utr_end`) |
(ENST_protein_coding_UTRs$exon_chrom_end == ENST_protein_coding_UTRs$`3_utr_start` &
ENST_protein_coding_UTRs$exon_chrom_start == ENST_protein_coding_UTRs$`3_utr_end`)
),
]
#Eliminate 5' UTRs
ENST_protein_coding_fewer_UTRs$exon_chrom_end <- apply(ENST_protein_coding_fewer_UTRs, 1, function(x){
if(!is.na(x['5_utr_end']) &
!is.na(x['exon_chrom_end']) &
x['5_utr_end'] == x['exon_chrom_end']){
return(as.numeric(x['5_utr_start'])-1)
} else {
return(x['exon_chrom_end'])
}
})
#Eliminate 5' UTRs
ENST_protein_coding_fewer_UTRs$exon_chrom_start <- apply(ENST_protein_coding_fewer_UTRs, 1, function(x){
if(!is.na(x['5_utr_start']) &
!is.na(x['exon_chrom_start']) &
x['5_utr_start'] == x['exon_chrom_start']){
return(as.numeric(x['5_utr_end'])+1)
} else {
return(x['exon_chrom_start'])
}
})
#Eliminate 3' UTRs
ENST_protein_coding_fewer_UTRs$exon_chrom_end <- apply(ENST_protein_coding_fewer_UTRs, 1, function(x){
if(!is.na(x['3_utr_end']) &
!is.na(x['exon_chrom_end']) &
x['3_utr_end'] == x['exon_chrom_end']){
return(as.numeric(x['3_utr_start'])-1)
} else {
return(x['exon_chrom_end'])
}
})
#Eliminate 3' UTRs
ENST_protein_coding_fewer_UTRs$exon_chrom_start <- apply(ENST_protein_coding_fewer_UTRs, 1, function(x){
if(!is.na(x['3_utr_start']) &
!is.na(x['exon_chrom_start']) &
x['3_utr_start'] == x['exon_chrom_start']){
return(as.numeric(x['3_utr_end'])+1)
} else {
return(x['exon_chrom_start'])
}
})
View(ENST_protein_coding)
View(ENST_protein_coding_no_UTRs_bed)
View(ENST_protein_coding_fewer_UTRs)
ENST_protein_coding_no_UTRs_bed <- ENST_protein_coding_fewer_UTRs[1:5]
View(ENST_protein_coding_no_UTRs_bed)
ENST_protein_coding_no_UTRs_bed$chromosome_name <- factor(ENST_protein_coding_no_UTRs_bed$chromosome_name,
levels = c(1:22, 'X', 'Y'))
ENST_protein_coding_no_UTRs_bed$exon_chrom_start <- as.numeric(ENST_protein_coding_no_UTRs_bed$exon_chrom_start)
ENST_protein_coding_no_UTRs_bed$exon_chrom_end <- as.numeric(ENST_protein_coding_no_UTRs_bed$exon_chrom_end)
write.table(single_probe, file = 'single_probe.bed', quote=F, sept='\t', row.anmes=F, col.names=F)
write.table(single_probe, file = 'single_probe.bed', quote=F, sept='\t', row.names=F, col.names=F)
write.table(single_probe, file = 'single_probe.bed', quote=F, sep='\t', row.names=F, col.names=F)
#pull variants that require only one probe for analysis
single_probe <- subset(capture_sequencing, tile=='no')
single_probe <- single_probe[c(11:13,1,2,14)]
write.table(single_probe, file = 'single_probe.bed', quote=F, sep='\t', row.names=F, col.names=F)
single_probe$start <- single_probe$start - 1
single_probe$start <- gsub(' ', '', single_probe$start)
single_probe$stop <- gsub(' ', '', single_probe$stop)
single_probe <- single_probe[with(single_probe, order(chrom, start)), ]
write.table(single_probe, file = 'single_probe.bed', quote=F, sep='\t', row.names=F, col.names=F)
exons <- ENST_protein_coding_no_UTRs_bed
exons <- exons[with(exons, order(chrom, start)), ]
exons <- exons[with(exons, order(chr, start)), ]
View(exons)
exons <- exons[with(exons, order(chrosome_name, exon_chrom_start)), ]
exons <- exons[with(exons, order(chromosome_name, exon_chrom_start)), ]
exons$exon_chrom_start <- exons$exon_chrom_start - 1
exons$exon_chrom_start <- gsub(' ', '', exons$exon_chrom_start)
exons$exon_chrom_stop <- gsub(' ', '', exons$exon_chrom_stop)
exons$exon_chrom_end <- gsub(' ', '', exons$exon_chrom_end)
write.table(exons, file = 'exons.txt', quote=F, sep='\t', row.names=F, col.names=F)
write.table(exons, file = 'exons.txt', quote=F, sep='\t', row.names=F, col.names=F)
write.table(exons, file = 'exons.txt', quote=F, sep='\t', row.names=F, col.names=F)
View(exons)
exons[c(3:5,1,2)]
exons <- exons[c(3:5,1,2)]
write.table(exons, file = 'exons.txt', quote=F, sep='\t', row.names=F, col.names=F)
write.table(exons, file = 'exons.txt', quote=F, sep='\t', row.names=F, col.names=F)
exons <- exons[c(3:5,1)]
View(exons)
exons <- ENST_protein_coding_no_UTRs_bed
View(exons)
exons$exon_chrom_end <- gsub(' ', '', exons$exon_chrom_end)
exons$exon_chrom_start <- gsub(' ', '', exons$exon_chrom_start)
exons <- exons[with(exons, order(chromosome_name, exon_chrom_start)), ]
View(exons)
write.table(exons, file = 'exons.txt', quote=F, sep='\t', row.names=F, col.names=F)
exons <- exons[c(3:5,1)]
write.table(exons, file = 'exons.txt', quote=F, sep='\t', row.names=F, col.names=F)
exons$chromosome_name <- factor(exons$chromosome_name, levels = c(1:22, 'X', 'Y'))
exons <- exons[with( exons, order(chromosome_name, "exon_chrom_start"))]
View(exons)
exons <- exons[with( exons, order(chromosome_name, "exon_chrom_start")), ]
exons <- exons[with(exons, order(chromosome_name, exon_chrom_start)), ]
View(exons)
write.table(exons, file = 'exons.txt', quote=F, sep='\t', row.names=F, col.names=F)
View(exons)
exons$chromosome_name <- factor(exons$chromosome_name, levels = c(1:22, 'X', 'Y'))
exons <- exons[with(exons, order(chromosome_name, exon_chrom_start)), ]
exons$exon_chrom_end <- as.numeric(exons$exon_chrom_end)
exons$exon_chrom_start <- as.numeric(exons$exon_chrom_start)
exons <- exons[with(exons, order(chromosome_name, exon_chrom_start)), ]
write.table(exons, file = 'exons.txt', quote=F, sep='\t', row.names=F, col.names=F)
