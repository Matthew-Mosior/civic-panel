Vehicle1.Exome_ref_count + Vehicle1.Exome_var_count > 20 |
Vehicle2.Exome_ref_count + Vehicle2.Exome_var_count > 20 |
Vehicle3.Exome_ref_count + Vehicle3.Exome_var_count > 20) #Eliminate <20x Coverage
conservation_df <- subset(conservation_df, Tumor.Exome_ref_count + Tumor.Exome_var_count > 20) #|
conservation_df <- subset(conservation_df, #Tumor.Exome_ref_count + Tumor.Exome_var_count > 20) |
Xenograft.Exome_ref_count + Xenograft.Exome_var_count > 20)# |
conservation_df <- read.table('/Users/ebarnell/oscc/xenografts/R/GSK2233-all.readcounts.tsv', head=T, sep='\t') #Read in dataframe
conservation_df <- conservation_df[c(1:5,9:11,12:14,15:17,18:20,21:23)] #pull desired columns
conservation_df <- subset(conservation_df, Tumor.Exome_ref_count + Tumor.Exome_var_count > 20) #Eliminate <20x Coverage
tumor_specific <- subset(conservation_df, Tumor.Exome_ref_count > 5)
tumor_specific <- subset(conservation_df, Tumor.Exome_VAF > 5)
tumor_specific <- subset(conservation_df, Tumor.Exome_VAF > 5 & Xenograft.Exome_VAF <5 & Vehicle1.Exome_VAF <5 & Vehicle2.Exome_VAF <5 & Vehicle3.Exome_VAF <5)
xenograft_specific <- subset(conservation_df, Tumor.Exome_VAF < 5 & Xenograft.Exome_VAF >5 & Vehicle1.Exome_VAF <5 & Vehicle2.Exome_VAF <5 & Vehicle3.Exome_VAF <5)
View(xenograft_specific)
View(tumor_specific)
veh1_specific <- subset(conservation_df, Tumor.Exome_VAF <5 & Xenograft.Exome_VAF <5 & Vehicle1.Exome_VAF >5 & Vehicle2.Exome_VAF <5 & Vehicle3.Exome_VAF <5)
veh2_specific <- subset(conservation_df, Tumor.Exome_VAF <5 & Xenograft.Exome_VAF <5 & Vehicle1.Exome_VAF <5 & Vehicle2.Exome_VAF >5 & Vehicle3.Exome_VAF <5)
veh3_specific <- subset(conservation_df, Tumor.Exome_VAF <5 & Xenograft.Exome_VAF <5 & Vehicle1.Exome_VAF <5 & Vehicle2.Exome_VAF <5 & Vehicle3.Exome_VAF >5)
View(veh1_specific)
View(veh2_specific)
View(xenograft_specific)
View(tumor_specific)
tumor_xenograft_overlap <- subset(conservation_df, Tumor.Exome_VAF > 5 & Xenograft.Exome_VAF > 5)
View(tumor_xenograft_overlap)
tumor_xenograft_overlap <- subset(conservation_df, Tumor.Exome_VAF > 5 & Xenograft.Exome_VAF > 5 & Tumor.Exome_ref_count + Tumor.Exome_var_count > 20, Xenograft.Exome_ref_count + Xenograft.Exome_var_count > 20)
conservation_df <- read.table('/Users/ebarnell/oscc/xenografts/R/GSK2233-all.readcounts.tsv', head=T, sep='\t') #Read in dataframe
conservation_df <- conservation_df[c(1:5,9:11,12:14,15:17,18:20,21:23)] #pull desired columns
conservation_df <- subset(conservation_df, Tumor.Exome_ref_count + Tumor.Exome_var_count > 20) #Eliminate <20x Coverage
tumor_specific <- subset(conservation_df, Tumor.Exome_VAF > 5 & Xenograft.Exome_VAF <5 & Vehicle1.Exome_VAF <5 & Vehicle2.Exome_VAF <5 & Vehicle3.Exome_VAF <5)
tumor_xenograft_overlap <- subset(conservation_df, Tumor.Exome_VAF > 5 & Xenograft.Exome_VAF > 5 & Tumor.Exome_ref_count + Tumor.Exome_var_count > 20, Xenograft.Exome_ref_count + Xenograft.Exome_var_count > 20)
View(tumor_xenograft_overlap)
tumor_xenograft_overlap <- subset(conservation_df, Tumor.Exome_VAF > 5 & Xenograft.Exome_VAF > 5 & Tumor.Exome_ref_count + Tumor.Exome_var_count > 20 &Xenograft.Exome_ref_count + Xenograft.Exome_var_count > 20)
View(tumor_xenograft_overlap)
View(xenograft_specific)
xenograft_specific
nrow(conservation_df[conservation_df$Tumor.Exome_VAF>0,])
tumor <- subset(conservation_df, Tumor.Exome_VAF > 5) #& Xenograft.Exome_VAF <5 & Vehicle1.Exome_VAF <5 & Vehicle2.Exome_VAF <5 & Vehicle3.Exome_VAF <5)
tumor <- subset(conservation_df, Tumor.Exome_VAF > 0) #& Xenograft.Exome_VAF <5 & Vehicle1.Exome_VAF <5 & Vehicle2.Exome_VAF <5 & Vehicle3.Exome_VAF <5)
xenograft <- subset(conservation_df, Xenograft.Exome_VAF > 0) #& Xenograft.Exome_VAF <5 & Vehicle1.Exome_VAF <5 & Vehicle2.Exome_VAF <5 & Vehicle3.Exome_VAF <5)
xenograft_low <- subset(xenograft, Xenograft.Exome_ref_count + Xenograft.Exome_var_count > 20 )
xenograft_low <- subset(xenograft, Xenograft.Exome_ref_count + Xenograft.Exome_var_count < 20 )
xenograft_low_VAF <- subset(xenograft, Xenograft.Exome_VAF <5 )
xenograft_low <- subset(xenograft, Xenograft.Exome_ref_count + Xenograft.Exome_var_count < 20 & Xenograft.Exome_VAF <5)
xenograft_low <- subset(xenograft, Xenograft.Exome_ref_count + Xenograft.Exome_var_count < 20 | Xenograft.Exome_VAF <5)
veh1 <- subset(conservation_df, Vehicle1.Exome_VAF > 0)
veh2 <- subset(conservation_df, Vehicle1.Exome_VAF > 0)
veh2 <- subset(conservation_df, Vehicle2.Exome_VAF > 0)
veh3 <- subset(conservation_df, Vehicle3.Exome_VAF > 0)
conservation_df <- read.table('/Users/ebarnell/oscc/xenografts/R/GSK2233-all.readcounts.tsv', head=T, sep='\t') #Read in dataframe
conservation_df <- conservation_df[c(1:5,9:11,12:14,15:17,18:20,21:23)] #pull desired columns
tumor <- subset(conservation_df, Tumor.Exome_VAF > 0) #& Xenograft.Exome_VAF <5 & Vehicle1.Exome_VAF <5 & Vehicle2.Exome_VAF <5 & Vehicle3.Exome_VAF <5)
conservation_df <- read.table('/Users/ebarnell/oscc/xenografts/R/GSK2233-all.readcounts.tsv', head=T, sep='\t') #Read in dataframe
conservation_df <- conservation_df[c(1:5,9:11,12:14,15:17,18:20,21:23)] #pull desired columns
tumor <- subset(conservation_df, Tumor.Exome_VAF > 0) #& Xenograft.Exome_VAF <5 & Vehicle1.Exome_VAF <5 & Vehicle2.Exome_VAF <5 & Vehicle3.Exome_VAF <5)
conservation_df <- subset(conservation_df, Tumor.Exome_ref_count + Tumor.Exome_var_count > 20) #Eliminate <20x Coverage
tumor <- subset(conservation_df, Tumor.Exome_VAF > 0) #& Xenograft.Exome_VAF <5 & Vehicle1.Exome_VAF <5 & Vehicle2.Exome_VAF <5 & Vehicle3.Exome_VAF <5)
xenograft <- subset(conservation_df, Xenograft.Exome_VAF > 0) #& Xenograft.Exome_VAF <5 & Vehicle1.Exome_VAF <5 & Vehicle2.Exome_VAF <5 & Vehicle3.Exome_VAF <5)
xenograft_low <- subset(xenograft, Xenograft.Exome_ref_count + Xenograft.Exome_var_count < 20 | Xenograft.Exome_VAF <5)
conservation_df <- read.table('/Users/ebarnell/oscc/xenografts/R/GSK2233-all.readcounts.tsv', head=T, sep='\t') #Read in dataframe
conservation_df <- conservation_df[c(1:5,9:11,12:14,15:17,18:20,21:23)] #pull desired columns
conservation_df <- subset(conservation_df, Tumor.Exome_ref_count + Tumor.Exome_var_count > 20) #Eliminate <20x Coverage
tumor <- subset(conservation_df, Tumor.Exome_VAF > 0) #& Xenograft.Exome_VAF <5 & Vehicle1.Exome_VAF <5 & Vehicle2.Exome_VAF <5 & Vehicle3.Exome_VAF <5)
xenograft <- subset(conservation_df, Xenograft.Exome_VAF > 0) #& Xenograft.Exome_VAF <5 & Vehicle1.Exome_VAF <5 & Vehicle2.Exome_VAF <5 & Vehicle3.Exome_VAF <5)
xenograft_low <- subset(xenograft, Xenograft.Exome_ref_count + Xenograft.Exome_var_count < 20 | Xenograft.Exome_VAF <5)
veh1 <- subset(conservation_df, Vehicle1.Exome_VAF > 0)
veh2 <- subset(conservation_df, Vehicle2.Exome_VAF > 0)
veh3 <- subset(conservation_df, Vehicle3.Exome_VAF > 0)
conservation_df <- subset(conservation_df, Tumor.Exome_ref_count + Tumor.Exome_var_count > 20 & Tumor.Exome_VAF >5) #Eliminate <20x Coverage
View(conservation_df)
conservation_df <- subset(conservation_df, Tumor.Exome_ref_count + Tumor.Exome_var_count > 20 | Tumor.Exome_VAF <5) #Eliminate <20x Coverage
conservation_df <- read.table('/Users/ebarnell/oscc/xenografts/R/GSK2233-all.readcounts.tsv', head=T, sep='\t') #Read in dataframe
conservation_df <- conservation_df[c(1:5,9:11,12:14,15:17,18:20,21:23)] #pull desired columns
conservation_df <- subset(conservation_df, Tumor.Exome_ref_count + Tumor.Exome_var_count > 20 | Tumor.Exome_VAF <5) #Eliminate <20x Coverage
tumor <- subset(conservation_df, Tumor.Exome_VAF > 0) #& Xenograft.Exome_VAF <5 & Vehicle1.Exome_VAF <5 & Vehicle2.Exome_VAF <5 & Vehicle3.Exome_VAF <5)
conservation_df <- read.table('/Users/ebarnell/oscc/xenografts/R/GSK2233-all.readcounts.tsv', head=T, sep='\t') #Read in dataframe
conservation_df <- conservation_df[c(1:5,9:11,12:14,15:17,18:20,21:23)] #pull desired columns
conservation_df <- subset(conservation_df, Tumor.Exome_ref_count + Tumor.Exome_var_count > 20 | Tumor.Exome_VAF <5) #Eliminate <20x Coverage
conservation_df <- subset(conservation_df, Tumor.Exome_ref_count + Tumor.Exome_var_count > 20 | Tumor.Exome_VAF >5) #Eliminate <20x Coverage
xenograft_only <-  subset(conservation_df, Tumor.Exome_VAF == 0 & Xenograft.Exome_VAF > 0)
tumor_only <- subset(conservation_df, Tumor.Exome_VAF > 0 & Xenograft.Exome_VAF == 0)
xenograft <- subset(tumor, Xenograft.Exome_VAF > 0) #& Xenograft.Exome_VAF <5 & Vehicle1.Exome_VAF <5 & Vehicle2.Exome_VAF <5 & Vehicle3.Exome_VAF <5)
veh1_sub_xeno <- subset(xenograft, Vehicle1.Exome_VAF > 0)
veh2_sub_xeno <- subset(xenograft, Vehicle2.Exome_VAF > 0)
veh3_sub_xeno <- subset(xenograft, Vehicle3.Exome_VAF > 0)
veh1_sub_tumor <- subset(tumor, Vehicle1.Exome_VAF > 0)
veh2_sub_tumor <- subset(tumor, Vehicle2.Exome_VAF > 0)
veh3_sub_tumor <- subset(tumor, Vehicle3.Exome_VAF > 0)
veh1_only <- subset(conservation_df, Vehicle1.Exome_VAF > 0 & Xenograft.Exome_VAF ==0 & Tumor.Exome_VAF ==0)
veh2_only <- subset(conservation_df, Vehicle2.Exome_VAF > 0 & Xenograft.Exome_VAF ==0 & Tumor.Exome_VAF ==0)
veh3_only <- subset(conservation_df, Vehicle3.Exome_VAF > 0 & Xenograft.Exome_VAF ==0 & Tumor.Exome_VAF ==0)
veh_only <-subset(conservation_df, Vehicle1.Exome_VAF > 0 | Vehicle2.Exome_VAF > 0 | Vehicle3.Exome_VAF > 0 & Xenograft.Exome_VAF ==0 & Tumor.Exome_VAF ==0)
veh_only <-subset(conservation_df, Vehicle1.Exome_VAF > 0 & Xenograft.Exome_VAF ==0 & Tumor.Exome_VAF ==0 | Vehicle2.Exome_VAF > 0 & Xenograft.Exome_VAF ==0 & Tumor.Exome_VAF ==0 | Vehicle3.Exome_VAF > 0 & Xenograft.Exome_VAF ==0 & Tumor.Exome_VAF ==0)
View(veh1_only)
View(veh2_only)
View(veh2_only)
View(veh_only)
veh1_veh2 <- subset(conservation_df, Xenograft.Exome_VAF ==0 & Tumor.Exome_VAF ==0)
veh1_veh2 <- subset(veh1_veh2, Vehicle1.Exome_VAF > 0 & Vehicle2.Exome_VAF > 0)
veh1_veh2 <- subset(veh1_veh2, Vehicle1.Exome_VAF > 0 & Vehicle2.Exome_VAF > 0 & Vehicle3.Exome_VAF > 0)
veh1_veh2_veh3 <- subset(conservation_df, Xenograft.Exome_VAF ==0 & Tumor.Exome_VAF ==0)
veh1_veh2_veh3 <- subset(veh1_veh2_veh3, Vehicle1.Exome_VAF > 0 & Vehicle2.Exome_VAF > 0 & Vehicle3.Exome_VAF > 0)
View(veh1_veh2_veh3)
conservation_df <- read.table('/Users/ebarnell/oscc/xenografts/R/GSK2233-all.readcounts.tsv', head=T, sep='\t') #Read in dataframe
conservation_df <- conservation_df[c(1:5,9:11,12:14,15:17,18:20,21:23)] #pull desired columns
conservation_df <- subset(conservation_df, Tumor.Exome_ref_count + Tumor.Exome_var_count > 20 | Tumor.Exome_VAF >5) #
tumor <- subset(conservation_df, Tumor.Exome_VAF > 0) #
xenograft <- subset(tumor, Xenograft.Exome_VAF > 0) #
xenograft_only <-  subset(conservation_df, Tumor.Exome_VAF == 0 & Xenograft.Exome_VAF > 0) #
tumor_only <- subset(conservation_df, Tumor.Exome_VAF > 0 & Xenograft.Exome_VAF == 0)
xenograft_low <- subset(xenograft, Xenograft.Exome_ref_count + Xenograft.Exome_var_count < 20 | Xenograft.Exome_VAF <5)
veh1 <- subset(conservation_df, Vehicle1.Exome_VAF > 0)
veh2 <- subset(conservation_df, Vehicle2.Exome_VAF > 0)
veh3 <- subset(conservation_df, Vehicle3.Exome_VAF > 0)
veh1_sub_xeno <- subset(xenograft, Vehicle1.Exome_VAF > 0)
veh2_sub_xeno <- subset(xenograft, Vehicle2.Exome_VAF > 0)
veh3_sub_xeno <- subset(xenograft, Vehicle3.Exome_VAF > 0)
veh1_sub_tumor <- subset(tumor, Vehicle1.Exome_VAF > 0)
veh2_sub_tumor <- subset(tumor, Vehicle2.Exome_VAF > 0)
veh3_sub_tumor <- subset(tumor, Vehicle3.Exome_VAF > 0)
veh1_only <- subset(conservation_df, Vehicle1.Exome_VAF > 0 & Xenograft.Exome_VAF ==0 & Tumor.Exome_VAF ==0)
veh2_only <- subset(conservation_df, Vehicle2.Exome_VAF > 0 & Xenograft.Exome_VAF ==0 & Tumor.Exome_VAF ==0)
veh3_o
conservation_df <- read.table('/Users/ebarnell/oscc/xenografts/R/GSK2233-all.readcounts.tsv', head=T, sep='\t') #Read in dataframe
conservation_df <- conservation_df[c(1:5,9:11,12:14,15:17,18:20,21:23)] #pull desired columns
conservation_df <- subset(conservation_df, Tumor.Exome_ref_count + Tumor.Exome_var_count > 20 | Tumor.Exome_VAF >5) #
tumor <- subset(conservation_df, Tumor.Exome_VAF > 0) #
xenograft <- subset(tumor, Xenograft.Exome_VAF > 0) #
xenograft_only <-  subset(conservation_df, Tumor.Exome_VAF == 0 & Xenograft.Exome_VAF > 0) #
tumor_only <- subset(conservation_df, Tumor.Exome_VAF > 0 & Xenograft.Exome_VAF == 0)
xenograft_low <- subset(xenograft, Xenograft.Exome_ref_count + Xenograft.Exome_var_count < 20 | Xenograft.Exome_VAF <5)
veh1 <- subset(conservation_df, Vehicle1.Exome_VAF > 0)
veh2 <- subset(conservation_df, Vehicle2.Exome_VAF > 0)
veh3 <- subset(conservation_df, Vehicle3.Exome_VAF > 0)
veh1_sub_xeno <- subset(xenograft, Vehicle1.Exome_VAF > 0)
veh2_sub_xeno <- subset(xenograft, Vehicle2.Exome_VAF > 0)
veh3_sub_xeno <- subset(xenograft, Vehicle3.Exome_VAF > 0)
veh1_sub_tumor <- subset(tumor, Vehicle1.Exome_VAF > 0)
veh2_sub_tumor <- subset(tumor, Vehicle2.Exome_VAF > 0)
veh3_sub_tumor <- subset(tumor, Vehicle3.Exome_VAF > 0)
veh1_only <- subset(conservation_df, Vehicle1.Exome_VAF > 0 & Xenograft.Exome_VAF ==0 & Tumor.Exome_VAF ==0)
veh2_only <- subset(conservation_df, Vehicle2.Exome_VAF > 0 & Xenograft.Exome_VAF ==0 & Tumor.Exome_VAF ==0)
veh3_only <- subset(conservation_df, Vehicle3.Exome_VAF > 0 & Xenograft.Exome_VAF ==0 & Tumor.Exome_VAF ==0)
veh1_veh2_veh3 <- subset(conservation_df, Xenograft.Exome_VAF ==0 & Tumor.Exome_VAF ==0)
veh1_veh2_veh3 <- subset(veh1_veh2_veh3, Vehicle1.Exome_VAF > 0 & Vehicle2.Exome_VAF > 0 & Vehicle3.Exome_VAF > 0)
veh1_low <- subset(veh1, Vehicle1.Exome_ref_count + Vehicle1.Exome_var_count < 20 | Vehicle1.Exome_VAF <5)
veh1_low <- subset(veh1, Vehicle1.Exome_ref_count + Vehicle1.Exome_var_count < 20 | Vehicle1.Exome_VAF <5)
veh2_low <- subset(veh2, Vehicle2.Exome_ref_count + Vehicle2.Exome_var_count < 20 | Vehicle2.Exome_VAF <5)
veh3_low <- subset(veh3, Vehicle3.Exome_ref_count + Vehicle3.Exome_var_count < 20 | Vehicle3.Exome_VAF <5)
clear
data <- read.table('/Users/ebarnell/civic-panel/all_transcripts.txt', head=T, sep='\t')
View(data)
unique(data$Ensemble.transcript.ID)
unique(data$Ensemble.transcript.ID)
??unique
unique(data)
unique <- unique(data)
View(unique)
data$Ensembl.Transcript.ID
data <- read.table('/Users/ebarnell/civic-panel/all_transcripts.txt', head=T, sep='\t')
data2 <- read.table('/Users/ebarnell/Desktop/all_transcripts.txt', head=T, sep='\t')
data2 <- read.table('/Users/ebarnell/Desktop/transcript.txt', head=T, sep='\t')
View(data2)
unique(data2)
data2 <- read.table('/Users/ebarnell/Desktop/transcript.txt', head=F, sep='\t')
unique(data2)
count(unique(data2))
data2<-unique(data2)
View(data2)
View(data2)
View(data2)
write.table(data2, "c:/ENST_complete.txt", sep="\t")
write.table(data2, "/Users/ebarnell/civic-panel/ENST_complete.txt", sep="\t")
data2 <- read.table('/Users/ebarnell/Desktop/ENST_link_protein_coding.txt', head=T, sep='\t')
data <- read.table('/Users/ebarnell/civic-panel/ENST_complete', head=F, sep='\t')
data2 <- read.table('/Users/ebarnell/civic-panel/ENST_link_protein_coding.txt', head=T, sep='\t')
data <- read.table('/Users/ebarnell/civic-panel/ENST_complete.txt', head=F, sep='\t')
View(data2)
View(data)
data3 <- merge(data, subset(data2, data2$Transcript.Biotype=='protein_coding', by.x=V1, by.y=Ensemble.Transcript.ID)
data3 <- merge(data, subset(data2, data2$Transcript.Biotype=='protein_coding'), by.x=V1, by.y=Ensemble.Transcript.ID)
subset(data2, data2$Transcript.Biotype=='protein_coding')
data3 <- merge(data, subset(data2, data2$Transcript.Biotype=='protein_coding'), by.x=V1, by.y=Ensemble.Transcript.ID)
data3 <- merge(data, subset(data2, data2$Transcript.Biotype=='protein_coding'), by.x='V1', by.y='Ensemble.Transcript.ID')
data <- read.table('/Users/ebarnell/civic-panel/ENST_complete.txt', head=T, sep='\t')
View(data)
data3 <- merge(data, subset(data2, data2$Transcript.Biotype=='protein_coding'), by.x=ENST, by.y=Ensemble.Transcript.ID)
data3 <- merge(data, subset(data2, data2$Transcript.Biotype=='protein_coding'), by.x='ENST', by.y='Ensemble.Transcript.ID')
data3 <- merge(data, subset(data2, data2$Transcript.Biotype=='protein_coding'), by.x=data$ENST, by.y=data2$Ensemble.Transcript.ID)
data3 <- merge(data, subset(data2, data2$Transcript.Biotype=='protein_coding'), by.x(ENST), by.y(Ensemble.Transcript.ID))
data3 <- merge(data, subset(data2, data2$Transcript.Biotype=='protein_coding'), by.x= 'ENST', by.y= 'Ensemble.Transcript.ID')
data3 <- merge(data, subset(data2, data2$Transcript.Biotype=='protein_coding'), by.x= 'ENST', by.y= 'Ensembl.Transcript.ID')
View(data3)
View(data3)
write.table(data3, "/Users/ebarnell/civic-panel/ENST_protein_coding.txt", head=T, sep="\t")
write.table(data3, "/Users/ebarnell/civic-panel/ENST_protein_coding.txt", sep="\t")
source("http://bioconductor.org/biocLite.R")
?BiocUpgrade
source("https://bioconductor.org/biocLite.R")
source("https://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
library(biomaRt)
listEnsemble()
biocLite("biomaRt")
library(biomaRt)
listEnsembl()
representative_transcripts <- ENST_representative_transcripts_version.txt
representative_transcripts <- read.table('/Users/ebarnell/civic_panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
View(representative_transcripts)
representative_transcripts <- gsub('.*', '', representative_transcripts)
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts <- gsub('.', '', representative_transcripts)
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts <- gsub('\.*', '', representative_transcripts)
representative_transcripts <- gsub('.*', '', representative_transcripts)
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts <- gsub('..*', '', representative_transcripts)
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts <- gsub('.\\d', '', representative_transcripts)
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts <- gsub('.', ' ', representative_transcripts)
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts <- gsub('\\.', ' ', representative_transcripts)
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts <- gsub('[.]', ' ', representative_transcripts)
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts$transcript_ID <- gsub('[.]', ' ', representative_transcripts)
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts$transcript_ID <- gsub('[.]', ' ', representative_transcripts$transcript_I)
representative_transcripts$transcript_ID <- gsub('[.]*', ' ', representative_transcripts$transcript_I)
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts$transcript_ID <- gsub('[.]', '', representative_transcripts$transcript_I)
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts$transcript_ID <- gsub('[.]*', '', representative_transcripts$transcript_I)
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts$transcript_ID <- gsub('[.]*', '', representative_transcripts$transcript_I)
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts$transcript_ID <- gsub('[.]*', '', representative_transcripts$transcript_I)
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts$transcript_ID <- gsub('.*', '', representative_transcripts$transcript_I)
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts$transcript_ID <- gsub('\\..*', '', representative_transcripts$transcript_I)
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts$transcript_ID <- gsub('\\..*', '', representative_transcripts$transcript_ID)
grch37 = useEnsembl(biomart="ensembl",GRCh=37)
listDatasets(grch37)[31:35,]
listDatasets(grch37)[31]
listDatasets(grch37)[1:31]
listDatasets(grch37)[1:31,]
head(listFilters(ensembl))
library(biomaRt)
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts$transcript_ID <- gsub('\\..*', '', representative_transcripts$transcript_ID)
ensembl = useEnsembl(biomart="ensembl",GRCh=37, dataset='hsapiens_gene_ensembl')
head(listFilters(ensembl))
head(listAttributes(ensembl))
getBM(attributes = c('ensembl_gene_id', filters = 'ensembl_transcript_id', values = representative_transcripts))
getBM(attributes = c('ensembl_gene_id', filters = 'ensembl_transcript_id', values = representative_transcripts, mart = ensembl))
ensembl = useEnsembl(biomart="ensembl",GRCh=37, dataset='hsapiens_gene_ensembl')
getBM(attributes = c('ensembl_gene_id', filters = 'ensembl_transcript_id', values = representative_transcripts, mart = ensembl))
ensembl = useEnsembl(biomart="ensembl", dataset="hsapiens_gene_ensembl")
ENSG_all <- getBM(attributes = c('ensembl_gene_id', filters = 'ensembl_transcript_id', values = representative_transcripts, mart = ensembl))
?useMart
ensembl = useMart(biomart="ensembl", dataset="hsapiens_gene_ensembl", host="www.ensembl.org")
ENSG_all <- getBM(attributes = c('ensembl_gene_id', filters = 'ensembl_transcript_id', values = representative_transcripts, mart = ensembl))
ENSG_all <- getBM(attributes = c('ensembl_gene_id', filters = 'ensembl_transcript_id', values = 'ENSG00000139618', mart = ensembl))
listMarts
listMarts()
ensembl = useMartl(biomart="ENSEMBL_MART_ENSEMBL", dataset="hsapiens_gene_ensembl")
ENSG_all <- getBM(attributes = c('ensembl_gene_id', filters = 'ensembl_transcript_id', values = 'ENSG00000139618', mart = ensembl))
ensembl = useMart(biomart="ENSEMBL_MART_ENSEMBL", dataset="hsapiens_gene_ensembl")
ENSG_all <- getBM(attributes = c('ensembl_gene_id', filters = 'ensembl_transcript_id', values = 'ENSG00000139618', mart = ensembl))
useMart('ensembl')
listDatasets(mart)
listDatasets(useMart('ensembl'))
ensembl = useEnsembl(biomart="ensembl", dataset="hsapiens_gene_ensembl")
ensembl = useEnsembl(biomart="ensembl", dataset="hsapiens_gene_ensembl", GRCh=37)
ENSG_all <- getBM(attributes = c('ensembl_gene_id', filters = 'ensembl_transcript_id', values = 'ENSG00000139618', mart = ensembl))
ensembl = useEnsembl("ENSEMBL_MART_ENSEMBL", dataset="hsapiens_gene_ensembl", GRCh=37)
ENSG_all <- getBM(attributes = c('ensembl_gene_id', filters = 'ensembl_transcript_id', values = 'ENSG00000139618', mart = ensembl))
ensembl = useMart("ENSEMBL_MART_ENSEMBL", dataset = "hsapiens_gene_ensembl", host = "grch37.ensembl.org")
ENSG_all <- getBM(attributes = c('ensembl_gene_id', filters = 'ensembl_transcript_id', values = 'ENSG00000139618', mart = ensembl))
if(interactive()){
mart = useMart("ensembl")
mart=useMart(biomart="ensembl", dataset="hsapiens_gene_ensembl")
}
ENSG_all <- getBM(attributes = c('ensembl_gene_id', filters = 'ensembl_transcript_id', values = 'ENSG00000139618', mart = ensembl))
mart = useMart("ensembl")
ENSG_all <- getBM(attributes = c('ensembl_gene_id', filters = 'ensembl_transcript_id', values = 'ENSG00000139618', mart = ensembl))
mart = useMart("ensembl")
ENSG_all <- getBM(attributes = c('ensembl_gene_id', filters = 'ensembl_transcript_id', values = 'ENSG00000139618', mart = mart))
mart=useMart(biomart="ensembl", dataset="hsapiens_gene_ensembl")
ENSG_all <- getBM(attributes = c('ensembl_gene_id', filters = 'ensembl_transcript_id', values = 'ENSG00000139618', mart = mart))
?useMart
if(interactive()){
mart = useMart("ensembl")
mart=useMart(biomart="ensembl", dataset="hsapiens_gene_ensembl")
}
ENSG_all <- getBM(attributes = c('ensembl_gene_id', filters = 'ensembl_transcript_id', values = 'ENSG00000139618', mart = mart))
setwd('/Users/ebarnell/civic-panel/')
#Import Libraries
library(biomaRt)
library(data.table)
library('bedr')
#Read in list of ENSTs with version numbers of all genes that need to be tiled
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
#remove the version number
representative_transcripts$transcript_ID <- gsub('\\..*', '', representative_transcripts$transcript_ID)
#Upload the ensembl mart
ensembl_us_west = useMart(biomart="ENSEMBL_MART_ENSEMBL", host="uswest.ensembl.org", dataset="hsapiens_gene_ensembl")
#Use the representative transcripts to get the ENSG IDs
ENSG <- getBM(attributes=c('ensembl_gene_id'), filters ='ensembl_transcript_id', values =c(representative_transcripts$transcript_ID), mart = ensembl_us_west)
#Use the ENSG IDs to get all ENST IDs assocaited with ENSG
ENST_all <- getBM(attributes=c('ensembl_transcript_id','chromosome_name','exon_chrom_start','exon_chrom_end', 'transcript_biotype'
), filters ='ensembl_gene_id', values =c(ENSG$ensembl_gene_id), mart = ensembl_us_west)
#Filter by protein coding ENSTs
ENST_protein_coding <- subset(ENST_all, ENST_all$transcript_biotype == 'protein_coding')
#Obtain the UTRs for all protein coding ENSTs
ENST_protein_coding_UTRs <- getBM(attributes=c('chromosome_name','exon_chrom_start','exon_chrom_end','5_utr_start', '5_utr_end', '3_utr_start',
'3_utr_end'), filters ='ensembl_transcript_id', values =c(ENST_protein_coding$ensembl_transcript_id),
mart = ensembl_us_west)
#Eliminate exons that is all UTR
ENST_protein_coding_fewer_UTRs <- ENST_protein_coding_UTRs[-which((ENST_protein_coding_UTRs$exon_chrom_start == ENST_protein_coding_UTRs$`5_utr_start` &
ENST_protein_coding_UTRs$exon_chrom_end == ENST_protein_coding_UTRs$`5_utr_end`) |
(ENST_protein_coding_UTRs$exon_chrom_start == ENST_protein_coding_UTRs$`3_utr_start` &
ENST_protein_coding_UTRs$exon_chrom_end == ENST_protein_coding_UTRs$`3_utr_end`) |
(ENST_protein_coding_UTRs$exon_chrom_end == ENST_protein_coding_UTRs$`5_utr_start` &
ENST_protein_coding_UTRs$exon_chrom_start == ENST_protein_coding_UTRs$`5_utr_end`) |
(ENST_protein_coding_UTRs$exon_chrom_end == ENST_protein_coding_UTRs$`3_utr_start` &
ENST_protein_coding_UTRs$exon_chrom_start == ENST_protein_coding_UTRs$`3_utr_end`)
),
]
ENST_protein_coding_fewer_UTRs$exon_chrom_end <- apply(ENST_protein_coding_fewer_UTRs, 1, function(x){
if(!is.na(x['5_utr_end']) &
!is.na(x['exon_chrom_end']) &
x['5_utr_end'] == x['exon_chrom_end']){
return(x['5_utr_start']-1)
} else {
return(x['exon_chrom_end'])
}
})
ENST_protein_coding_fewer_UTRs$exon_chrom_start <- apply(ENST_protein_coding_fewer_UTRs, 1, function(x){
if(!is.na(x['5_utr_start']) &
!is.na(x['exon_chrom_start']) &
x['5_utr_start'] == x['exon_chrom_start']){
return(x['5_utr_end']+1)
} else {
return(x['exon_chrom_start'])
}
})
ENST_protein_coding_fewer_UTRs$exon_chrom_end <- apply(ENST_protein_coding_fewer_UTRs, 1, function(x){
if(!is.na(x['3_utr_end']) &
!is.na(x['exon_chrom_end']) &
x['3_utr_end'] == x['exon_chrom_end']){
return(x['3_utr_start']-1)
} else {
return(x['exon_chrom_end'])
}
})
ENST_protein_coding_fewer_UTRs$exon_chrom_start <- apply(ENST_protein_coding_fewer_UTRs, 1, function(x){
if(!is.na(x['3_utr_start']) &
!is.na(x['exon_chrom_start']) &
x['3_utr_start'] == x['exon_chrom_start']){
return(x['3_utr_end']+1)
} else {
return(x['exon_chrom_start'])
}
})
ENST_protein_coding_no_UTRs_bed <- ENST_protein_coding_fewer_UTRs[1:3]
ENST_protein_coding_no_UTRs_bed_ordered <- ENST_protein_coding_no_UTRs_bed[with(
ENST_protein_coding_no_UTRs_bed, order(chromosome_name, exon_chrom_start)), ]
ENST_protein_coding_no_UTRs_bed_merged <- if (check.binary("bedtools")) {
index <- ENST_protein_coding_no_UTRs_bed_ordered;
a <- index[[1]];
a.sort <- bedr.sort.region(a);
a.merged <- bedr.merge.region(a.sort);
}
ENST_protein_coding_no_UTRs_bed_merged <- bedr.merge.region(ENST_protein_coding_no_UTRs_bed_ordered)
if (check.binary("bedr")) {
index <- get.example.regions();
a <- index[[1]];
a.sort <- bedr.sort.region(a);
a.merged <- bedr.merge.region(a.sort);
}
if (check.binary("bedtools")) {
index <- get.example.regions();
a <- index[[1]];
a.sort <- bedr.sort.region(a);
a.merged <- bedr.merge.region(a.sort);
}
if (check.binary("bedtools")) {
index <- get.example.regions();
a <- index[[1]];
a.sort <- bedr.sort.region(a);
a.merged <- bedr.merge.region(a.sort);
}
if (check.binary("bedtools")) {
index <- get.example.regions();
a <- index[[1]];
a.sort <- bedr.sort.region(a);
a.merged <- bedr.merge.region(a.sort);
}
write.table(ENST_protein_coding_no_UTRs_bed_merged, file = "ENST_protein_coding_no_UTRs_bed_merged.bed", append = FALSE, quote = TRUE, sep = "\t",
eol = "\n", na = "", row.names = FALSE,
col.names = TRUE)
setwd('/Users/ebarnell/civic-panel/')
#Import Libraries
library(biomaRt)
library(data.table)
library('bedr')
#Read in list of ENSTs with version numbers of all genes that need to be tiled
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
#remove the version number
representative_transcripts$transcript_ID <- gsub('\\..*', '', representative_transcripts$transcript_ID)
#Upload the ensembl mart
ensembl_us_west = useMart(biomart="ENSEMBL_MART_ENSEMBL", host="uswest.ensembl.org", dataset="hsapiens_gene_ensembl")
#Use the representative transcripts to get the ENSG IDs
ENSG <- getBM(attributes=c('ensembl_gene_id'), filters ='ensembl_transcript_id', values =c(representative_transcripts$transcript_ID), mart = ensembl_us_west)
#Use the ENSG IDs to get all ENST IDs assocaited with ENSG
ENST_all <- getBM(attributes=c('ensembl_transcript_id','chromosome_name','exon_chrom_start','exon_chrom_end', 'transcript_biotype'
), filters ='ensembl_gene_id', values =c(ENSG$ensembl_gene_id), mart = ensembl_us_west)
#Filter by protein coding ENSTs
ENST_protein_coding <- subset(ENST_all, ENST_all$transcript_biotype == 'protein_coding')
#Obtain the UTRs for all protein coding ENSTs
ENST_protein_coding_UTRs <- getBM(attributes=c('chromosome_name','exon_chrom_start','exon_chrom_end','5_utr_start', '5_utr_end', '3_utr_start',
'3_utr_end'), filters ='ensembl_transcript_id', values =c(ENST_protein_coding$ensembl_transcript_id),
mart = ensembl_us_west)
#Eliminate exons that is all UTR
ENST_protein_coding_fewer_UTRs <- ENST_protein_coding_UTRs[-which((ENST_protein_coding_UTRs$exon_chrom_start == ENST_protein_coding_UTRs$`5_utr_start` &
ENST_protein_coding_UTRs$exon_chrom_end == ENST_protein_coding_UTRs$`5_utr_end`) |
(ENST_protein_coding_UTRs$exon_chrom_start == ENST_protein_coding_UTRs$`3_utr_start` &
ENST_protein_coding_UTRs$exon_chrom_end == ENST_protein_coding_UTRs$`3_utr_end`) |
(ENST_protein_coding_UTRs$exon_chrom_end == ENST_protein_coding_UTRs$`5_utr_start` &
ENST_protein_coding_UTRs$exon_chrom_start == ENST_protein_coding_UTRs$`5_utr_end`) |
(ENST_protein_coding_UTRs$exon_chrom_end == ENST_protein_coding_UTRs$`3_utr_start` &
ENST_protein_coding_UTRs$exon_chrom_start == ENST_protein_coding_UTRs$`3_utr_end`)
),
]
ENST_protein_coding_fewer_UTRs$exon_chrom_end <- apply(ENST_protein_coding_fewer_UTRs, 1, function(x){
if(!is.na(x['5_utr_end']) &
!is.na(x['exon_chrom_end']) &
x['5_utr_end'] == x['exon_chrom_end']){
return(x['5_utr_start']-1)
} else {
return(x['exon_chrom_end'])
}
})
ENST_protein_coding_fewer_UTRs$exon_chrom_start <- apply(ENST_protein_coding_fewer_UTRs, 1, function(x){
if(!is.na(x['5_utr_start']) &
!is.na(x['exon_chrom_start']) &
x['5_utr_start'] == x['exon_chrom_start']){
return(x['5_utr_end']+1)
} else {
return(x['exon_chrom_start'])
}
})
ENST_protein_coding_fewer_UTRs$exon_chrom_end <- apply(ENST_protein_coding_fewer_UTRs, 1, function(x){
if(!is.na(x['3_utr_end']) &
!is.na(x['exon_chrom_end']) &
x['3_utr_end'] == x['exon_chrom_end']){
return(x['3_utr_start']-1)
} else {
return(x['exon_chrom_end'])
}
})
ENST_protein_coding_fewer_UTRs$exon_chrom_start <- apply(ENST_protein_coding_fewer_UTRs, 1, function(x){
if(!is.na(x['3_utr_start']) &
!is.na(x['exon_chrom_start']) &
x['3_utr_start'] == x['exon_chrom_start']){
return(x['3_utr_end']+1)
} else {
return(x['exon_chrom_start'])
}
})
ENST_protein_coding_no_UTRs_bed <- ENST_protein_coding_fewer_UTRs[1:3]
ENST_protein_coding_no_UTRs_bed_ordered <- ENST_protein_coding_no_UTRs_bed[with(
ENST_protein_coding_no_UTRs_bed, order(chromosome_name, exon_chrom_start)), ]
# ENST_protein_coding_no_UTRs_bed_merged <- if (check.binary("bedtools")) {
#   index <- ENST_protein_coding_no_UTRs_bed_ordered;
#   a <- index[[1]];
#   a.sort <- bedr.sort.region(a);
#   a.merged <- bedr.merge.region(a.sort);
# }
#ENST_protein_coding_no_UTRs_bed_merged <- bedr.merge.region(ENST_protein_coding_no_UTRs_bed_ordered)
write.table(ENST_protein_coding_no_UTRs_bed_merged, file = "ENST_protein_coding_no_UTRs_bed_merged.bed", append = FALSE, quote = TRUE, sep = "\t",
eol = "\n", na = "", row.names = FALSE,
col.names = TRUE)
View(ENST_protein_coding_no_UTRs_bed_ordered)
View(ENST_protein_coding_no_UTRs_bed)
View(ENST_protein_coding_no_UTRs_bed_ordered)
View(ENST_protein_coding_no_UTRs_bed)
write.table(ENST_protein_coding_no_UTRs_bed_merged, file = "ENST_protein_coding_no_UTRs_bed_merged.bed", sep = "\t",
eol = "\n", na = " ", row.names = TRUE,
col.names = TRUE)
write.table(ENST_protein_coding_no_UTRs_bed_merged, file = "ENST_protein_coding_no_UTRs_bed_merged.txt", sep = "\t",
eol = "\n", na = " ", row.names = TRUE,
col.names = TRUE)
write.table(ENST_protein_coding_no_UTRs_bed_merged, file = "ENST_protein_coding_no_UTRs_bed_merged.bed", sep = "\t")
write.table(ENST_protein_coding_no_UTRs_bed_merged, file = "ENST_protein_coding_no_UTRs_bed_merged.bed", sep = "\t", header=TRUE)
write.table(ENST_protein_coding_no_UTRs_bed_merged, file = "ENST_protein_coding_no_UTRs_bed_merged.bed",
quote=F, sep="\t", row.names=F, col.names=F)
head ENST_protein_coding_no_UTRs_bed_merged
head(ENST_protein_coding_no_UTRs_bed_merged)
write.table(ENST_protein_coding_no_UTRs_bed_orderedd, file = "ENST_protein_coding_no_UTRs_bed_merged.bed",
quote=F, sep="\t", row.names=F, col.names=F)
write.table(ENST_protein_coding_no_UTRs_bed_ordered, file = "ENST_protein_coding_no_UTRs_bed_merged.bed",
quote=F, sep="\t", row.names=F, col.names=F)
write.table(ENST_protein_coding_no_UTRs_bed_ordered, file = "ENST_protein_coding_no_UTRs_bed_ordered.bed",
quote=F, sep="\t", row.names=F, col.names=F)
