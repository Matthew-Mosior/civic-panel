unique(data$Ensemble.transcript.ID)
??unique
unique(data)
unique <- unique(data)
View(unique)
data$Ensembl.Transcript.ID
data <- read.table('/Users/ebarnell/civic-panel/all_transcripts.txt', head=T, sep='\t')
data2 <- read.table('/Users/ebarnell/Desktop/all_transcripts.txt', head=T, sep='\t')
data2 <- read.table('/Users/ebarnell/Desktop/transcript.txt', head=T, sep='\t')
View(data2)
unique(data2)
data2 <- read.table('/Users/ebarnell/Desktop/transcript.txt', head=F, sep='\t')
unique(data2)
count(unique(data2))
data2<-unique(data2)
View(data2)
View(data2)
View(data2)
write.table(data2, "c:/ENST_complete.txt", sep="\t")
write.table(data2, "/Users/ebarnell/civic-panel/ENST_complete.txt", sep="\t")
data2 <- read.table('/Users/ebarnell/Desktop/ENST_link_protein_coding.txt', head=T, sep='\t')
data <- read.table('/Users/ebarnell/civic-panel/ENST_complete', head=F, sep='\t')
data2 <- read.table('/Users/ebarnell/civic-panel/ENST_link_protein_coding.txt', head=T, sep='\t')
data <- read.table('/Users/ebarnell/civic-panel/ENST_complete.txt', head=F, sep='\t')
View(data2)
View(data)
data3 <- merge(data, subset(data2, data2$Transcript.Biotype=='protein_coding', by.x=V1, by.y=Ensemble.Transcript.ID)
data3 <- merge(data, subset(data2, data2$Transcript.Biotype=='protein_coding'), by.x=V1, by.y=Ensemble.Transcript.ID)
subset(data2, data2$Transcript.Biotype=='protein_coding')
data3 <- merge(data, subset(data2, data2$Transcript.Biotype=='protein_coding'), by.x=V1, by.y=Ensemble.Transcript.ID)
data3 <- merge(data, subset(data2, data2$Transcript.Biotype=='protein_coding'), by.x='V1', by.y='Ensemble.Transcript.ID')
data <- read.table('/Users/ebarnell/civic-panel/ENST_complete.txt', head=T, sep='\t')
View(data)
data3 <- merge(data, subset(data2, data2$Transcript.Biotype=='protein_coding'), by.x=ENST, by.y=Ensemble.Transcript.ID)
data3 <- merge(data, subset(data2, data2$Transcript.Biotype=='protein_coding'), by.x='ENST', by.y='Ensemble.Transcript.ID')
data3 <- merge(data, subset(data2, data2$Transcript.Biotype=='protein_coding'), by.x=data$ENST, by.y=data2$Ensemble.Transcript.ID)
data3 <- merge(data, subset(data2, data2$Transcript.Biotype=='protein_coding'), by.x(ENST), by.y(Ensemble.Transcript.ID))
data3 <- merge(data, subset(data2, data2$Transcript.Biotype=='protein_coding'), by.x= 'ENST', by.y= 'Ensemble.Transcript.ID')
data3 <- merge(data, subset(data2, data2$Transcript.Biotype=='protein_coding'), by.x= 'ENST', by.y= 'Ensembl.Transcript.ID')
View(data3)
View(data3)
write.table(data3, "/Users/ebarnell/civic-panel/ENST_protein_coding.txt", head=T, sep="\t")
write.table(data3, "/Users/ebarnell/civic-panel/ENST_protein_coding.txt", sep="\t")
source("http://bioconductor.org/biocLite.R")
?BiocUpgrade
source("https://bioconductor.org/biocLite.R")
source("https://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
library(biomaRt)
listEnsemble()
biocLite("biomaRt")
library(biomaRt)
listEnsembl()
representative_transcripts <- ENST_representative_transcripts_version.txt
representative_transcripts <- read.table('/Users/ebarnell/civic_panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
View(representative_transcripts)
representative_transcripts <- gsub('.*', '', representative_transcripts)
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts <- gsub('.', '', representative_transcripts)
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts <- gsub('\.*', '', representative_transcripts)
representative_transcripts <- gsub('.*', '', representative_transcripts)
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts <- gsub('..*', '', representative_transcripts)
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts <- gsub('.\\d', '', representative_transcripts)
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts <- gsub('.', ' ', representative_transcripts)
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts <- gsub('\\.', ' ', representative_transcripts)
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts <- gsub('[.]', ' ', representative_transcripts)
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts$transcript_ID <- gsub('[.]', ' ', representative_transcripts)
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts$transcript_ID <- gsub('[.]', ' ', representative_transcripts$transcript_I)
representative_transcripts$transcript_ID <- gsub('[.]*', ' ', representative_transcripts$transcript_I)
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts$transcript_ID <- gsub('[.]', '', representative_transcripts$transcript_I)
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts$transcript_ID <- gsub('[.]*', '', representative_transcripts$transcript_I)
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts$transcript_ID <- gsub('[.]*', '', representative_transcripts$transcript_I)
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts$transcript_ID <- gsub('[.]*', '', representative_transcripts$transcript_I)
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts$transcript_ID <- gsub('.*', '', representative_transcripts$transcript_I)
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts$transcript_ID <- gsub('\\..*', '', representative_transcripts$transcript_I)
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts$transcript_ID <- gsub('\\..*', '', representative_transcripts$transcript_ID)
grch37 = useEnsembl(biomart="ensembl",GRCh=37)
listDatasets(grch37)[31:35,]
listDatasets(grch37)[31]
listDatasets(grch37)[1:31]
listDatasets(grch37)[1:31,]
head(listFilters(ensembl))
library(biomaRt)
representative_transcripts <- read.table('/Users/ebarnell/civic-panel/ENST_representative_transcripts_version.txt', head=T, sep='\t')
representative_transcripts$transcript_ID <- gsub('\\..*', '', representative_transcripts$transcript_ID)
ensembl = useEnsembl(biomart="ensembl",GRCh=37, dataset='hsapiens_gene_ensembl')
head(listFilters(ensembl))
head(listAttributes(ensembl))
getBM(attributes = c('ensembl_gene_id', filters = 'ensembl_transcript_id', values = representative_transcripts))
getBM(attributes = c('ensembl_gene_id', filters = 'ensembl_transcript_id', values = representative_transcripts, mart = ensembl))
ensembl = useEnsembl(biomart="ensembl",GRCh=37, dataset='hsapiens_gene_ensembl')
getBM(attributes = c('ensembl_gene_id', filters = 'ensembl_transcript_id', values = representative_transcripts, mart = ensembl))
ensembl = useEnsembl(biomart="ensembl", dataset="hsapiens_gene_ensembl")
ENSG_all <- getBM(attributes = c('ensembl_gene_id', filters = 'ensembl_transcript_id', values = representative_transcripts, mart = ensembl))
?useMart
ensembl = useMart(biomart="ensembl", dataset="hsapiens_gene_ensembl", host="www.ensembl.org")
ENSG_all <- getBM(attributes = c('ensembl_gene_id', filters = 'ensembl_transcript_id', values = representative_transcripts, mart = ensembl))
ENSG_all <- getBM(attributes = c('ensembl_gene_id', filters = 'ensembl_transcript_id', values = 'ENSG00000139618', mart = ensembl))
listMarts
listMarts()
ensembl = useMartl(biomart="ENSEMBL_MART_ENSEMBL", dataset="hsapiens_gene_ensembl")
ENSG_all <- getBM(attributes = c('ensembl_gene_id', filters = 'ensembl_transcript_id', values = 'ENSG00000139618', mart = ensembl))
ensembl = useMart(biomart="ENSEMBL_MART_ENSEMBL", dataset="hsapiens_gene_ensembl")
ENSG_all <- getBM(attributes = c('ensembl_gene_id', filters = 'ensembl_transcript_id', values = 'ENSG00000139618', mart = ensembl))
useMart('ensembl')
listDatasets(mart)
listDatasets(useMart('ensembl'))
ensembl = useEnsembl(biomart="ensembl", dataset="hsapiens_gene_ensembl")
ensembl = useEnsembl(biomart="ensembl", dataset="hsapiens_gene_ensembl", GRCh=37)
ENSG_all <- getBM(attributes = c('ensembl_gene_id', filters = 'ensembl_transcript_id', values = 'ENSG00000139618', mart = ensembl))
ensembl = useEnsembl("ENSEMBL_MART_ENSEMBL", dataset="hsapiens_gene_ensembl", GRCh=37)
ENSG_all <- getBM(attributes = c('ensembl_gene_id', filters = 'ensembl_transcript_id', values = 'ENSG00000139618', mart = ensembl))
ensembl = useMart("ENSEMBL_MART_ENSEMBL", dataset = "hsapiens_gene_ensembl", host = "grch37.ensembl.org")
ENSG_all <- getBM(attributes = c('ensembl_gene_id', filters = 'ensembl_transcript_id', values = 'ENSG00000139618', mart = ensembl))
if(interactive()){
mart = useMart("ensembl")
mart=useMart(biomart="ensembl", dataset="hsapiens_gene_ensembl")
}
ENSG_all <- getBM(attributes = c('ensembl_gene_id', filters = 'ensembl_transcript_id', values = 'ENSG00000139618', mart = ensembl))
mart = useMart("ensembl")
ENSG_all <- getBM(attributes = c('ensembl_gene_id', filters = 'ensembl_transcript_id', values = 'ENSG00000139618', mart = ensembl))
mart = useMart("ensembl")
ENSG_all <- getBM(attributes = c('ensembl_gene_id', filters = 'ensembl_transcript_id', values = 'ENSG00000139618', mart = mart))
mart=useMart(biomart="ensembl", dataset="hsapiens_gene_ensembl")
ENSG_all <- getBM(attributes = c('ensembl_gene_id', filters = 'ensembl_transcript_id', values = 'ENSG00000139618', mart = mart))
?useMart
if(interactive()){
mart = useMart("ensembl")
mart=useMart(biomart="ensembl", dataset="hsapiens_gene_ensembl")
}
ENSG_all <- getBM(attributes = c('ensembl_gene_id', filters = 'ensembl_transcript_id', values = 'ENSG00000139618', mart = mart))
#Load Libraries for GenVisR Code
#library(BSgenome.Hsapiens.UCSC.hg38)
#hg38 <- BSgenome.Hsapiens.UCSC.hg38
library(GenVisR)
library(BSgenome.Hsapiens.UCSC.hg19)
hg19 <- BSgenome.Hsapiens.UCSC.hg19
GTB20_tumor <- read.table('/Users/ebarnell/Box Sync/PhD/GTB_Cases/GTB24/GTB24_second_attempt/GTB24_second_attempt_bamfiles.txt', header = TRUE, sep='\t')
compIdent(GTB20_tumor, genome= hg19, out = "plot")
library(BSgenome.Hsapiens.UCSC.hg19)
hg19 <- BSgenome.Hsapiens.UCSC.hg19
compIdent(GTB20_tumor, genome= hg19, out = "plot")
GTB20_tumor <- read.table('/Users/ebarnell/Box Sync/PhD/GTB_Cases/GTB24/GTB24_second_attempt/GTB24_second_attempt_bamfiles.txt', header = FALSE, sep='\t')
compIdent(GTB20_tumor, genome= hg19, out = "plot")
compIDent??
??compIdent
compIdent(GTB20_tumor)
ggplot(error_data, aes(disease)) +
geom_bar(aes(fill=error)) +
theme() +
theme_minimal()
setwd('/Users/ebarnell/Box Sync/PhD/Manual_Review_Classifier')
library(ggplot2)
error_data <- read.table('/Users/ebarnell/Box Sync/PhD/Manual_Review_Classifier/errors_for_erica.txt', header=TRUE, sep='\t')
ggplot(error_data, aes(disease)) +
geom_bar(aes(fill=error)) +
theme() +
theme_minimal()
View(error_data)
ggplot(error_data, aes(disease, fill=error)) +
geom_bar() +
theme() +
theme_minimal()
ggplot(error_data, aes(disease, fill=error)) +
geom_bar(stat=frequency) +
theme() +
theme_minimal()
ggplot(error_data, aes(disease, fill=error)) +
geom_bar(stat="frequency") +
theme() +
theme_minimal()
ggplot(error_data, aes(disease, fill=error), stat=frequency) +
geom_bar() +
theme() +
theme_minimal()
ggplot(error_data, aes(disease, fill=error)) +
geom_bar(aes(y = ..count../sum(..count..)) +
theme() +
theme_minimal()
ggplot(error_data, aes(disease, fill=error)) +
geom_bar(aes(y = ..count../sum(..count..)) +
theme() +
theme_minimal()
ggplot(error_data, aes(disease, fill=error)) +
geom_bar(aes(y = ..count../sum(..count..)) +
theme_minimal()
ggplot(error_data, aes(disease, fill=error)) +
geom_bar(aes(y = ..count../sum(..count..))) +
theme_minimal()
ggplot(error_data, aes(disease, fill=error)) +
geom_bar(aes(y = ..count../sum(..count..))) +
theme_minimal()
ggplot(error_data, aes(x=disease)) +
geom_bar(aes(y = ..count../sum(..count..)), fill=error) +
ylab("Frequency of Error") +
xlab("Disease") +
theme_minimal()
ggplot(error_data, aes(x=disease)) +
geom_bar(aes(y = ..count../sum(..count..), fill=error)) +
ylab("Frequency of Error") +
xlab("Disease") +
theme_minimal()
ggplot(error_data, aes(disease, fill=error)) +
geom_bar() +
ylab('Counts') +
xlab('Disease') +
theme_minimal()
ggplot(error_data, aes(disease, fill=error)) +
geom_bar() +
ylab('Counts') +
xlab('Disease') +
axis(1, at=1:9, labels = c('AML', 'Breast', 'CRC', 'GBM', 'GIST', 'Lymph', 'MM', 'MPNST', 'SCLC')) +
theme_minimal()
ggplot(error_data, aes(disease, fill=error)) +
geom_bar() +
ylab('Counts') +
xlab('Disease') +
xaxis(labels = c('AML', 'Breast', 'CRC', 'GBM', 'GIST', 'Lymph', 'MM', 'MPNST', 'SCLC')) +
theme_minimal()
ggplot(error_data, aes(disease, fill=error)) +
geom_bar() +
ylab('Counts') +
xlab('Disease') +
axis(labels = c('AML', 'Breast', 'CRC', 'GBM', 'GIST', 'Lymph', 'MM', 'MPNST', 'SCLC')) +
theme_minimal()
ggplot(error_data, aes(disease, fill=error)) +
geom_bar() +
ylab('Counts') +
xlab('Disease') +
theme_minimal()
ggplot(error_data, aes(x=disease, y=freq, fill=error)) +
geom_bar(stat='identity') +
ylab('Counts') +
xlab('Disease') +
theme_minimal()
ggplot(error_data, aes(x=disease, y=error, fill=error)) +
geom_bar(stat='identity') +
ylab('Counts') +
xlab('Disease') +
theme_minimal()
ggplot(error_data, aes(x=disease, fill=error)) +
geom_bar() +
ylab('Counts') +
xlab('Disease') +
theme_minimal()
count(subset(error_data, error='False Positive'))
subset(error_data, select='error')
as.data.frame(subset(error_data, select='error'))
count(error_data, 'error')
install.packages('plyr')
install.packages("plyr")
install.packages("plyr")
library(plyr)
install.packages("plyr")
install.packages("plyr")
count(error_data, 'error')
library(plyr)
count(error_data, 'error')
ggplot(error_data, aes(x=disease, fill=error)) +
geom_histogram() +
ylab('Counts') +
xlab('Disease') +
theme_minimal()
library(ggplot2)
ggplot(error_data, aes(x=disease, fill=error)) +
geom_histogram() +
ylab('Counts') +
xlab('Disease') +
theme_minimal()
ggplot(error_data, aes(x=disease, fill=error)) +
geom_histogram(stat='freq' +
ylab('Counts') +
xlab('Disease') +
theme_minimal()
ggplot(error_data, aes(x=disease, fill=error)) +
geom_histogram(stat='freq') +
ylab('Counts') +
xlab('Disease') +
theme_minimal()
ggplot(error_data, aes(x=disease, fill=error)) +
geom_histogram(stat='identity') +
ylab('Counts') +
xlab('Disease') +
theme_minimal()
ggplot(error_data, aes(x=disease, fill=error)) +
geom_histogram() +
ylab('Counts') +
xlab('Disease') +
theme_minimal()
stat='bin', position = 'identity'
ggplot(error_data, aes(disease)) +
geom_histogram(stat='bin', position = 'identity') +
ylab('Counts') +
xlab('Disease') +
theme_minimal()
ggplot(error_data, aes(disease)) +
geom_histogram(stat='freq', position = 'identity') +
ylab('Counts') +
xlab('Disease') +
theme_minimal()
ggplot(error_data, aes(disease)) +
geom_histogram(stat='identity', position = 'identity') +
ylab('Counts') +
xlab('Disease') +
theme_minimal()
ggplot(error_data, aes(disease)) +
geom_histogram(binwidth = 500) +
ylab('Counts') +
xlab('Disease') +
theme_minimal()
ggplot(error_data, aes(disease)) +
geom_histogram(binwidth = 500), stat=count)+
ylab('Counts') +
xlab('Disease') +
theme_minimal()
ggplot(error_data, aes(disease, fill=error)) +
geom_histogram(binwidth = 500) +
ylab('Counts') +
xlab('Disease') +
theme_minimal()
ggplot(error_data, aes(disease, fill=error)) +
geom_histogram(binwidth = 500, stat=count) +
ylab('Counts') +
xlab('Disease') +
theme_minimal()
ggplot(error_data, aes(disease, fill=error)) +
geom_histogram(binwidth = 500, stat='count') +
ylab('Counts') +
xlab('Disease') +
theme_minimal()
ggplot(error_data, aes(disease, fill=error)) +
geom_histogram(binwidth = 500) +
ggplot(error_data, aes(disease, colour = error)) +
geom_freqpoly(binwidth = 500)
ggplot(error_data, aes(disease, fill=error)) +
geom_histogram(binwidth = 10) +
ggplot(error_data, aes(disease, colour = error)) +
geom_freqpoly(binwidth = 10)
ggplot(error_data, aes(disease, fill=error)) +
geom_histogram(aes(weight=error))
ggplot(error_data, aes(disease, fill=error)) +
geom_bar(aes(weight=error))
#Distribution by Frequencies
ggplot(error_data, aes(disease, fill=error)) +
geom_freqpoly(aes(weight=error))
ggplot(error_data, aes(disease, fill=error)) +
geom_freqpoly()
ggplot(error_data, aes(x=disease, fill=error)) +
geom_bar(position='fill') +
ylab('Counts') +
xlab('Disease') +
theme_minimal()
library(ggally)
install.packages('GGally')
library(GGally)
library(gridExtra)
#Distribution by Counts
count <- ggplot(error_data, aes(x=disease, fill=error)) +
geom_bar() +
ylab('Counts') +
xlab('Disease') +
theme_minimal()
#Distribution by Frequencies
frequency <- ggplot(error_data, aes(x=disease, fill=error)) +
geom_bar(position='fill') +
ylab('Frequency') +
xlab('Disease') +
theme_minimal()
a<- rectGrob(count)
library(ggplot2)
library(plyr)
library(GGally)
library(gridExtra)
library(grid)
library(lattice)
a<- rectGrob(count)
grid.arrange(count,frequency, ncol=2)
count <- ggplot(error_data, aes(x=disease, fill=error)) +
geom_bar() +
ylab('Counts') +
xlab('Disease') +
theme(legend.position="none") +
theme_minimal()
ggplot(error_data, aes(x=disease, fill=error)) +
geom_bar() +
ylab('Counts') +
xlab('Disease') +
theme(legend.position="none") +
theme_minimal()
ggplot(error_data, aes(x=disease, fill=error)) +
geom_bar() +
ylab('Counts') +
xlab('Disease') +
scale_fill_discrete(guide=FALSE) +
theme_minimal()
grid.arrange(qplot(count),frequency, ncol=2)
subset(error_data, disease='colorectal' & error='False Negative')
subset(error_data, error_data$disease='colorectal' & error_data$error='False Negative')
subset(error_data, error_data$disease=='colorectal' & error_data$error=='False Negative')
subset(error_data, error_data$disease=='colorectal' & error_data$error=='False Positive')
count(subset(error_data, error_data$disease=='colorectal' & error_data$error=='False Positive'))
subset(error_data, error_data$disease=='colorectal' & error_data$error=='False Positive')
as.data.frame(subset(error_data, error_data$disease=='colorectal' & error_data$error=='False Positive'))
sum(subset(error_data, error_data$disease=='colorectal' & error_data$error=='False Positive'))
nrow(subset(error_data, error_data$disease=='colorectal' & error_data$error=='False Positive'))
nrow(subset(error_data, error_data$disease=='glioblastoma' & error_data$error=='False Positive'))
nrow(subset(error_data, error_data$disease=='glioblastoma' & error_data$error=='False Negative'))
nrow(subset(error_data, error_data$disease=='glioblastoma'))
nrow(subset(error_data, error_data$disease=='colorectal'))
install.packages('jsonlite')
library(jsonlite)
install.packages(c("httr", "jsonlite", "lubridate"))
install.packages(c("httr", "jsonlite", "lubridate"))
library(ggplot2)
library(plyr)
library(GGally)
library(jsonlite)
library(httr)
library(lubridate)
CIViC <- 'https://civic.genome.wustl.edu/api/variants'
CIViC
CIViC <- GET(url='https://civic.genome.wustl.edu/api/variants')
CIViC <- GET(url='https://civic.genome.wustl.edu/api/variants?count=1000000')
CIViC <- fromJSON(GET(url='https://civic.genome.wustl.edu/api/variants?count=1000000'))
CIViC <- fromJSON('https://civic.genome.wustl.edu/api/variants?count=1000000')
####Erica Barnell
####10/8/2017
setwd('/Users/ebarnell/Box Sync/PhD/Manual_Review_Classifier')
library(ggplot2)
library(plyr)
library(GGally)
library(jsonlite)
library(httr)
library(lubridate)
###############
##    DATA   ##
###############
error_data <- read.table('/Users/ebarnell/Box Sync/PhD/Manual_Review_Classifier/errors_for_erica.txt', header=TRUE, sep='\t')
#Distribution by Counts
count <- ggplot(error_data, aes(x=disease, fill=error)) +
geom_bar() +
ylab('Counts') +
xlab('Disease') +
scale_fill_discrete(guide=FALSE) +
theme_minimal()
#Distribution by Frequencies
frequency <- ggplot(error_data, aes(x=disease, fill=error)) +
geom_bar(position='fill') +
ylab('Frequency') +
xlab('Disease') +
theme_minimal()
View(error_data)
clinical_data <- read.table('/Users/ebarnell/Box Sync/PhD/Manual_Review_Classifier/clinical_variants_DNA_unique.txt', header=TRUE, sep='\t')
View(clinical_data)
count(clinical_data$call)
filtered <- read.table('/Users/ebarnell/civic-panel/panel_samples/exac.pass.tsv', header = TRUE, sep='/t')
filtered <- read.table('/Users/ebarnell/civic-panel/panel_samples/exac.pass.tsv', header = TRUE, sep='\t')
####Erica Barnell
####10/8/2017
setwd('/Users/ebarnell/civic-panel/panel_samples')
filtered <- read.table('/Users/ebarnell/civic-panel/panel_samples/exac.pass.tsv', header = TRUE, sep='\t')
filtered <- read.table('/Users/ebarnell/civic-panel/panel_samples/exac.pass.tsv', header = TRUE, sep='\t')
View(filtered)
filtered <- read.table('/Users/ebarnell/civic-panel/panel_samples/exac.pass.tsv', header = TRUE, sep='\t')
View(filtered)
filtered <- read.table('/Users/ebarnell/civic-panel/panel_samples/exac.pass.txt', header = TRUE, sep='\t')
View(filtered)
final <- read.table('/Users/ebarnell/civic-panel/panel_samples/Steve_tumors.txt', header = TRUE, sep='\t')
View(final)
CRC <- merge(filtered, final, by.x=c('chr', 'start', 'stop', 'ref', 'var'), by.y=c('chr', 'start', 'end', 'ref_base', 'var_base'))
CRC <- merge(filtered, final, by.x('chr', 'start', 'stop', 'ref', 'var'), by.y('chr', 'start', 'end', 'ref_base', 'var_base'))
CRC <- merge(filtered, final, by.x=c('chr', 'start', 'stop', 'ref', 'var'), by.y=c('chromosome', 'start', 'end', 'ref_base', 'var_base'))
View(CRC)
CRC <- merge(filtered, final, by.x=c('chr', 'start', 'stop', 'ref', 'var'), by.y=c('chromosome', 'start', 'end', 'ref_base', 'var_base')
all.x=TRUE, all.y=FALSE)
?merge()
merge()?
??merge
CRC <- merge(filtered, final, by.x=c('chr', 'start', 'stop', 'ref', 'var'), by.y=c('chromosome', 'start', 'end', 'ref_base', 'var_base')
all.x=TRUE)
CRC <- merge(filtered, final, by.x=c('chr', 'start', 'stop', 'ref', 'var'), by.y=c('chromosome', 'start', 'end', 'ref_base', 'var_base')
all.x=all)
CRC <- merge(filtered, final, by.x=c('chr', 'start', 'stop', 'ref', 'var'), by.y=c('chromosome', 'start', 'end', 'ref_base', 'var_base')
all.x=TRUE, all.y=FALSE)
CRC <- merge(filtered, final, by.x=c('chr', 'start', 'stop', 'ref', 'var'), by.y=c('chromosome', 'start', 'end', 'ref_base', 'var_base'),
all.x=TRUE, all.y=FALSE)
setwd('/Users/ebarnell/civic-panel/panel_samples')
filtered <- read.table('/Users/ebarnell/civic-panel/panel_samples/exac.pass.txt', header = TRUE, sep='\t')
final <- read.table('/Users/ebarnell/civic-panel/panel_samples/Steve_tumors.txt', header = TRUE, sep='\t')
CRC <- merge(filtered, final, by.x=c('chr', 'start', 'stop', 'ref', 'var'), by.y=c('chromosome', 'start', 'end', 'ref_base', 'var_base'),
all.x=TRUE, all.y=FALSE)
View(CRC)
unique_filtered <- unique(filtered)
